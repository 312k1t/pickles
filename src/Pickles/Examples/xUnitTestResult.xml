<assembly name="C:\Dev\pickles\src\Pickles\Pickles.Example.xUnit\bin\Debug\PicklesDoc.Pickles.Example.xUnit.dll" run-date="2013-07-30" run-time="20:45:23" configFile="C:\Dev\pickles\src\Pickles\Pickles.Example.xUnit\bin\Debug\PicklesDoc.Pickles.Example.xUnit.dll.config" time="0.499" total="53" passed="50" failed="1" skipped="2" environment="32-bit .NET 4.0.30319.18052" test-framework="xUnit.net 1.9.1.1600"><class time="0.256" name="PicklesDoc.Pickles.Example.xUnit.Features._00BasicGherkin.ShowingBasicGherkinSyntaxFeature" total="2" passed="2" failed="0" skipped="0"><test name="PicklesDoc.Pickles.Example.xUnit.Features._00BasicGherkin.ShowingBasicGherkinSyntaxFeature.UsingAndAndBut" type="PicklesDoc.Pickles.Example.xUnit.Features._00BasicGherkin.ShowingBasicGherkinSyntaxFeature" method="UsingAndAndBut" result="Pass" time="0.256"><traits><trait name="Description" value="Using And and But" /><trait name="FeatureTitle" value="Showing basic gherkin syntax" /></traits><output>Given the initial state of the application is Running
-&gt; done: BasicGherkinSteps.InitialStateIsRunning() (0,0s)
And I have authorization to ask application state
-&gt; done: BasicGherkinSteps.IsAuthorized() (0,0s)
When I ask what the application state is
-&gt; done: BasicGherkinSteps.AskState() (0,0s)
Then I should see Running as the answer
-&gt; done: BasicGherkinSteps.SeeRunninAsState() (0,0s)
And I should see the time of the application
-&gt; done: BasicGherkinSteps.SeeTheTime() (0,0s)
But the state of the application should not be Stopped
-&gt; done: BasicGherkinSteps.StateisNotStopped() (0,0s)
</output></test><test name="PicklesDoc.Pickles.Example.xUnit.Features._00BasicGherkin.ShowingBasicGherkinSyntaxFeature.SimpleGWT" type="PicklesDoc.Pickles.Example.xUnit.Features._00BasicGherkin.ShowingBasicGherkinSyntaxFeature" method="SimpleGWT" result="Pass" time="0.000"><traits><trait name="Description" value="Simple GWT" /><trait name="FeatureTitle" value="Showing basic gherkin syntax" /></traits><output>Given the initial state of the application is Running
-&gt; done: BasicGherkinSteps.InitialStateIsRunning() (0,0s)
When I ask what the application state is
-&gt; done: BasicGherkinSteps.AskState() (0,0s)
Then I should see Running as the answer
-&gt; done: BasicGherkinSteps.SeeRunninAsState() (0,0s)
</output></test></class><class time="0.003" name="PicklesDoc.Pickles.Example.xUnit.Features._01TestRunner.TheTestRunnerIsNotVeryImportantFeature" total="1" passed="1" failed="0" skipped="0"><test name="PicklesDoc.Pickles.Example.xUnit.Features._01TestRunner.TheTestRunnerIsNotVeryImportantFeature.ACoupleOfSimpleSteps" type="PicklesDoc.Pickles.Example.xUnit.Features._01TestRunner.TheTestRunnerIsNotVeryImportantFeature" method="ACoupleOfSimpleSteps" result="Pass" time="0.003"><traits><trait name="Description" value="A couple of simple steps" /><trait name="FeatureTitle" value="The test runner is not (very) important" /></traits><output>Given I have step defintions in place
-&gt; done: TestRunnerDemoSteps.IHaveStepsDefintionsInPlace() (0,0s)
When I call a step
-&gt; done: TestRunnerDemoSteps.CallAStep() (0,0s)
Then the step should have been called
-&gt; done: TestRunnerDemoSteps.StepShouldHaveBeenCalled() (0,0s)
</output></test></class><class time="0.015" name="PicklesDoc.Pickles.Example.xUnit.Features._02TagsAndHooks.AdditionFeature" total="5" passed="5" failed="0" skipped="0"><test name="PicklesDoc.Pickles.Example.xUnit.Features._02TagsAndHooks.AdditionFeature.HookingIntoPreConditionsForScenarioBlocksInSpecFlow" type="PicklesDoc.Pickles.Example.xUnit.Features._02TagsAndHooks.AdditionFeature" method="HookingIntoPreConditionsForScenarioBlocksInSpecFlow" result="Pass" time="0.012"><traits><trait name="FeatureTitle" value="Addition" /><trait name="Description" value="Hooking into pre conditions for ScenarioBlocks in SpecFlow" /></traits><output>Given the scenario is running
-&gt; done: HooksDemoSteps.GivenTheScenarioIsRunning() (0,0s)
Then the BeforeScenarioBlock hook should have been executed
-&gt; done: HooksDemoSteps.ThenTheBeforeScenarioBlockHookShouldHaveBeenExecuted() (0,0s)
</output></test><test name="PicklesDoc.Pickles.Example.xUnit.Features._02TagsAndHooks.AdditionFeature.HookingIntoPreConditionsForScenariosInSpecFlow" type="PicklesDoc.Pickles.Example.xUnit.Features._02TagsAndHooks.AdditionFeature" method="HookingIntoPreConditionsForScenariosInSpecFlow" result="Pass" time="0.001"><traits><trait name="FeatureTitle" value="Addition" /><trait name="Description" value="Hooking into pre conditions for Scenarios in SpecFlow" /></traits><output>Given the scenario is running
-&gt; done: HooksDemoSteps.GivenTheScenarioIsRunning() (0,0s)
Then the BeforeScenario hook should have been executed
-&gt; done: HooksDemoSteps.ThenTheBeforeScenarioHookShouldHaveBeenExecuted() (0,0s)
</output></test><test name="PicklesDoc.Pickles.Example.xUnit.Features._02TagsAndHooks.AdditionFeature.HookingIntoPreConditionsForStepsInSpecFlow" type="PicklesDoc.Pickles.Example.xUnit.Features._02TagsAndHooks.AdditionFeature" method="HookingIntoPreConditionsForStepsInSpecFlow" result="Pass" time="0.001"><traits><trait name="Description" value="Hooking into pre conditions for Steps in SpecFlow" /><trait name="FeatureTitle" value="Addition" /></traits><output>Given the scenario is running
-&gt; done: HooksDemoSteps.GivenTheScenarioIsRunning() (0,0s)
Then the BeforeStep hook should have been executed
-&gt; done: HooksDemoSteps.ThenTheBeforeStepHookShouldHaveBeenExecuted() (0,0s)
</output></test><test name="PicklesDoc.Pickles.Example.xUnit.Features._02TagsAndHooks.AdditionFeature.HookingIntoPreConditionsForFeaturesInSpecFlow" type="PicklesDoc.Pickles.Example.xUnit.Features._02TagsAndHooks.AdditionFeature" method="HookingIntoPreConditionsForFeaturesInSpecFlow" result="Pass" time="0.000"><traits><trait name="FeatureTitle" value="Addition" /><trait name="Description" value="Hooking into pre conditions for Features in SpecFlow" /></traits><output>Given the scenario is running
-&gt; done: HooksDemoSteps.GivenTheScenarioIsRunning() (0,0s)
Then the BeforeFeature hook should have been executed
-&gt; done: HooksDemoSteps.ThenTheBeforeFeatureHookShouldHaveBeenExecuted() (0,0s)
</output></test><test name="PicklesDoc.Pickles.Example.xUnit.Features._02TagsAndHooks.AdditionFeature.HookingIntoPreConditionsForTestRunsInSpecFlow" type="PicklesDoc.Pickles.Example.xUnit.Features._02TagsAndHooks.AdditionFeature" method="HookingIntoPreConditionsForTestRunsInSpecFlow" result="Pass" time="0.001"><traits><trait name="Description" value="Hooking into pre conditions for Test Runs in SpecFlow" /><trait name="FeatureTitle" value="Addition" /></traits><output>Given the scenario is running
-&gt; done: HooksDemoSteps.GivenTheScenarioIsRunning() (0,0s)
Then the BeforeTestRun hook should have been executed
-&gt; done: HooksDemoSteps.ThenTheBeforeTestRunHookShouldHaveBeenExecuted() (0,0s)
</output></test></class><class time="0.017" name="PicklesDoc.Pickles.Example.xUnit.Features._02TagsAndHooks.TagDemonstratorFeature" total="5" passed="4" failed="0" skipped="1"><test name="PicklesDoc.Pickles.Example.xUnit.Features._02TagsAndHooks.TagDemonstratorFeature.AScenarioWith2Tags" type="PicklesDoc.Pickles.Example.xUnit.Features._02TagsAndHooks.TagDemonstratorFeature" method="AScenarioWith2Tags" result="Pass" time="0.014"><traits><trait name="Description" value="A scenario with 2 tags" /><trait name="FeatureTitle" value="Tag demonstrator" /></traits><output>Given that my scenario has 2 tags
-&gt; done: TagDemoSteps.GivenThatMyScenarioHas1Tag(2) (0,0s)
When I run the scenario
-&gt; done: TagDemoSteps.WhenIRunTheScenario() (0,0s)
Then before scenario hook with 'testTag1, testTag3' is run
-&gt; done: TagDemoSteps.AssertCorrectHooksHasBeenRun("testTag1, testTag3") (0,0s)
</output></test><test name="PicklesDoc.Pickles.Example.xUnit.Features._02TagsAndHooks.TagDemonstratorFeature.AScenarioWith3Tags" type="PicklesDoc.Pickles.Example.xUnit.Features._02TagsAndHooks.TagDemonstratorFeature" method="AScenarioWith3Tags" result="Pass" time="0.001"><traits><trait name="Description" value="A scenario with 3 tags" /><trait name="FeatureTitle" value="Tag demonstrator" /></traits><output>Given that my scenario has 3 tags
-&gt; done: TagDemoSteps.GivenThatMyScenarioHas1Tag(3) (0,0s)
When I run the scenario
-&gt; done: TagDemoSteps.WhenIRunTheScenario() (0,0s)
Then before scenario hook with 'testTag1, testTag2, testTag3' is run
-&gt; done: TagDemoSteps.AssertCorrectHooksHasBeenRun("testTag1, testTag...") (0,0s)
</output></test><test name="PicklesDoc.Pickles.Example.xUnit.Features._02TagsAndHooks.TagDemonstratorFeature.AScenarioWithoutTags" type="PicklesDoc.Pickles.Example.xUnit.Features._02TagsAndHooks.TagDemonstratorFeature" method="AScenarioWithoutTags" result="Pass" time="0.001"><traits><trait name="Description" value="A scenario without tags" /><trait name="FeatureTitle" value="Tag demonstrator" /></traits><output>Given that my scenario has 0 tags
-&gt; done: TagDemoSteps.GivenThatMyScenarioHas1Tag(0) (0,0s)
When I run the scenario
-&gt; done: TagDemoSteps.WhenIRunTheScenario() (0,0s)
Then before scenario hook with '' is run
-&gt; done: TagDemoSteps.AssertCorrectHooksHasBeenRun("") (0,0s)
</output></test><test name="PicklesDoc.Pickles.Example.xUnit.Features._02TagsAndHooks.TagDemonstratorFeature.IgnoredScenario" type="PicklesDoc.Pickles.Example.xUnit.Features._02TagsAndHooks.TagDemonstratorFeature" method="IgnoredScenario" result="Skip"><traits><trait name="Description" value="Ignored scenario" /><trait name="FeatureTitle" value="Tag demonstrator" /></traits><reason><message>Ignored</message></reason></test><test name="PicklesDoc.Pickles.Example.xUnit.Features._02TagsAndHooks.TagDemonstratorFeature.AScenarioWith1Tag" type="PicklesDoc.Pickles.Example.xUnit.Features._02TagsAndHooks.TagDemonstratorFeature" method="AScenarioWith1Tag" result="Pass" time="0.001"><traits><trait name="Description" value="A scenario with 1 tag" /><trait name="FeatureTitle" value="Tag demonstrator" /></traits><output>Given that my scenario has 1 tags
-&gt; done: TagDemoSteps.GivenThatMyScenarioHas1Tag(1) (0,0s)
When I run the scenario
-&gt; done: TagDemoSteps.WhenIRunTheScenario() (0,0s)
Then before scenario hook with 'testTag1' is run
-&gt; done: TagDemoSteps.AssertCorrectHooksHasBeenRun("testTag1") (0,0s)
</output></test></class><class time="0.052" name="PicklesDoc.Pickles.Example.xUnit.Features._031ScenarioContext.ScenarioContextFeaturesFeature" total="5" passed="3" failed="1" skipped="1"><test name="PicklesDoc.Pickles.Example.xUnit.Features._031ScenarioContext.ScenarioContextFeaturesFeature.StoreAndRetrivePersonMarcusFromScenarioContext" type="PicklesDoc.Pickles.Example.xUnit.Features._031ScenarioContext.ScenarioContextFeaturesFeature" method="StoreAndRetrivePersonMarcusFromScenarioContext" result="Pass" time="0.004"><traits><trait name="FeatureTitle" value="Scenario Context features" /><trait name="Description" value="Store and retrive Person Marcus from ScenarioContext" /></traits><output>When I store a person called Marcus in the Current ScenarioContext
-&gt; done: ScenarioContextSteps.StorePersonInScenarioContext("Marcus") (0,0s)
Then a person called Marcus can easily be retrieved
-&gt; done: ScenarioContextSteps.RetrieveFromScenarioContext("Marcus") (0,0s)
</output></test><test name="PicklesDoc.Pickles.Example.xUnit.Features._031ScenarioContext.ScenarioContextFeaturesFeature.PendingStep" type="PicklesDoc.Pickles.Example.xUnit.Features._031ScenarioContext.ScenarioContextFeaturesFeature" method="PendingStep" result="Fail" time="0.014"><traits><trait name="Description" value="Pending step" /><trait name="FeatureTitle" value="Scenario Context features" /></traits><output>When I set the ScenarioContext.Current to pending
-&gt; pending: ScenarioContextSteps.WhenIHaveAPendingStep()
Then this step will not even be executed
-&gt; skipped because of previous errors
</output><failure exception-type="TechTalk.SpecFlow.SpecFlowException"><message>TechTalk.SpecFlow.SpecFlowException : Test pending: One or more step definitions are not implemented yet.
  ScenarioContextSteps.WhenIHaveAPendingStep()</message><stack-trace>   at TechTalk.SpecFlow.UnitTestProvider.XUnitRuntimeProvider.TestPending(String message)
   at TechTalk.SpecFlow.ErrorHandling.ErrorProvider.ThrowPendingError(TestStatus testStatus, String message)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()
   at PicklesDoc.Pickles.Example.xUnit.Features._031ScenarioContext.ScenarioContextFeaturesFeature.ScenarioCleanup() in c:\Dev\pickles\src\Pickles\Pickles.Example.xUnit\Features\031ScenarioContext\ScenarioContext1.feature.cs:line 0
   at PicklesDoc.Pickles.Example.xUnit.Features._031ScenarioContext.ScenarioContextFeaturesFeature.PendingStep() in c:\Dev\pickles\src\Pickles\Pickles.Example.xUnit\Features\031ScenarioContext\ScenarioContext.feature:line 32</stack-trace></failure></test><test name="PicklesDoc.Pickles.Example.xUnit.Features._031ScenarioContext.ScenarioContextFeaturesFeature.ShowingInformationOfTheScenario" type="PicklesDoc.Pickles.Example.xUnit.Features._031ScenarioContext.ScenarioContextFeaturesFeature" method="ShowingInformationOfTheScenario" result="Pass" time="0.027"><traits><trait name="Description" value="Showing information of the scenario" /><trait name="FeatureTitle" value="Scenario Context features" /></traits><output>When I execute any scenario
-&gt; done: ScenarioContextSteps.ExecuteAnyScenario() (0,0s)
Then the ScenarioInfo contains the following information
  --- table step argument ---
  | Field | Value                               |
  | Tags  | showUpInScenarioInfo, andThisToo    |
  | Title | Showing information of the scenario |
-&gt; done: ScenarioContextSteps.ScenarioInfoContainsInterestingInformation(&lt;table&gt;) (0,0s)
</output></test><test name="PicklesDoc.Pickles.Example.xUnit.Features._031ScenarioContext.ScenarioContextFeaturesFeature.DisplayErrorInformationInAfterScenario" type="PicklesDoc.Pickles.Example.xUnit.Features._031ScenarioContext.ScenarioContextFeaturesFeature" method="DisplayErrorInformationInAfterScenario" result="Skip"><traits><trait name="Description" value="Display error information in AfterScenario" /><trait name="FeatureTitle" value="Scenario Context features" /></traits><reason><message>Ignored</message></reason></test><test name="PicklesDoc.Pickles.Example.xUnit.Features._031ScenarioContext.ScenarioContextFeaturesFeature.ShowTheTypeOfStepWeReCurrentlyOn" type="PicklesDoc.Pickles.Example.xUnit.Features._031ScenarioContext.ScenarioContextFeaturesFeature" method="ShowTheTypeOfStepWeReCurrentlyOn" result="Pass" time="0.007"><traits><trait name="FeatureTitle" value="Scenario Context features" /><trait name="Description" value="Show the type of step we're currently on" /></traits><output>Given I have a Given step
-&gt; done: ScenarioContextSteps.ReportStepTypeName("Given") (0,0s)
And I have another Given step
-&gt; done: ScenarioContextSteps.ReportStepTypeName("Given") (0,0s)
When I have a When step
-&gt; done: ScenarioContextSteps.ReportStepTypeName("When") (0,0s)
Then I have a Then step
-&gt; done: ScenarioContextSteps.ReportStepTypeName("Then") (0,0s)
</output></test></class><class time="0.008" name="PicklesDoc.Pickles.Example.xUnit.Features._032FeatureContext.FeatureContextFeaturesFeature" total="2" passed="2" failed="0" skipped="0"><test name="PicklesDoc.Pickles.Example.xUnit.Features._032FeatureContext.FeatureContextFeaturesFeature.StoreAndRetrivePersonMarcusFromFeatureContextCurrent" type="PicklesDoc.Pickles.Example.xUnit.Features._032FeatureContext.FeatureContextFeaturesFeature" method="StoreAndRetrivePersonMarcusFromFeatureContextCurrent" result="Pass" time="0.002"><traits><trait name="Description" value="Store and retrive Person Marcus from FeatureContext Current" /><trait name="FeatureTitle" value="FeatureContext features" /></traits><output>When I store a person called Marcus in the current FeatureContext
-&gt; done: FeatureContextSteps.StorePersonInFeatureContext("Marcus") (0,0s)
Then a person called Marcus can easily be retrieved from the current FeatureContext
-&gt; done: FeatureContextSteps.RetrieveFromFeatureContext("Marcus") (0,0s)
</output></test><test name="PicklesDoc.Pickles.Example.xUnit.Features._032FeatureContext.FeatureContextFeaturesFeature.ShowingInformationOfTheFeature" type="PicklesDoc.Pickles.Example.xUnit.Features._032FeatureContext.FeatureContextFeaturesFeature" method="ShowingInformationOfTheFeature" result="Pass" time="0.006"><traits><trait name="Description" value="Showing information of the feature" /><trait name="FeatureTitle" value="FeatureContext features" /></traits><output>When I execute any scenario in the feature
-&gt; done: FeatureContextSteps.ExecuteAnyScenario() (0,0s)
Then the FeatureInfo contains the following information
  --- table step argument ---
  | Field          | Value                            |
  | Tags           | showUpInScenarioInfo, andThisToo |
  | Title          | FeatureContext features          |
  | TargetLanguage | CSharp                           |
  | Language       | en-US                            |
  | Description    | In order to                      |
-&gt; done: FeatureContextSteps.FeatureInfoContainsInterestingInformation(&lt;table&gt;) (0,0s)
</output></test></class><class time="0.004" name="PicklesDoc.Pickles.Example.xUnit.Features._03ScenarioOutline.ScenarioOutlineFeature" total="5" passed="5" failed="0" skipped="0"><test name="PicklesDoc.Pickles.Example.xUnit.Features._03ScenarioOutline.ScenarioOutlineFeature.AddTwoPositiveNumbersWithManyExamples(number1: &quot;1000&quot;, number2: &quot;20&quot;, result: &quot;1020&quot;, exampleTags: System.String[])" type="PicklesDoc.Pickles.Example.xUnit.Features._03ScenarioOutline.ScenarioOutlineFeature" method="AddTwoPositiveNumbersWithManyExamples" result="Pass" time="0.004"><traits><trait name="Description" value="Add two positive numbers with many examples" /><trait name="FeatureTitle" value="Scenario outline" /></traits><output>Given I enter 1000 into the calculator
-&gt; done: ScenarioOutlineSteps.GivenIHaveEntered(1000) (0,0s)
And I enter 20 into the calculator
-&gt; done: ScenarioOutlineSteps.GivenIHaveEntered(20) (0,0s)
When I perform add
-&gt; done: ScenarioOutlineSteps.WhenIPressAdd() (0,0s)
Then the result should be 1020
-&gt; done: ScenarioOutlineSteps.ThenTheResultShouldBe(1020) (0,0s)
</output></test><test name="PicklesDoc.Pickles.Example.xUnit.Features._03ScenarioOutline.ScenarioOutlineFeature.AddTwoPositiveNumbersWithManyExamples(number1: &quot;100&quot;, number2: &quot;20&quot;, result: &quot;120&quot;, exampleTags: System.String[])" type="PicklesDoc.Pickles.Example.xUnit.Features._03ScenarioOutline.ScenarioOutlineFeature" method="AddTwoPositiveNumbersWithManyExamples" result="Pass" time="0.000"><traits><trait name="Description" value="Add two positive numbers with many examples" /><trait name="FeatureTitle" value="Scenario outline" /></traits><output>Given I enter 100 into the calculator
-&gt; done: ScenarioOutlineSteps.GivenIHaveEntered(100) (0,0s)
And I enter 20 into the calculator
-&gt; done: ScenarioOutlineSteps.GivenIHaveEntered(20) (0,0s)
When I perform add
-&gt; done: ScenarioOutlineSteps.WhenIPressAdd() (0,0s)
Then the result should be 120
-&gt; done: ScenarioOutlineSteps.ThenTheResultShouldBe(120) (0,0s)
</output></test><test name="PicklesDoc.Pickles.Example.xUnit.Features._03ScenarioOutline.ScenarioOutlineFeature.AddTwoPositiveNumbersWithManyExamples(number1: &quot;10&quot;, number2: &quot;20&quot;, result: &quot;30&quot;, exampleTags: System.String[])" type="PicklesDoc.Pickles.Example.xUnit.Features._03ScenarioOutline.ScenarioOutlineFeature" method="AddTwoPositiveNumbersWithManyExamples" result="Pass" time="0.000"><traits><trait name="Description" value="Add two positive numbers with many examples" /><trait name="FeatureTitle" value="Scenario outline" /></traits><output>Given I enter 10 into the calculator
-&gt; done: ScenarioOutlineSteps.GivenIHaveEntered(10) (0,0s)
And I enter 20 into the calculator
-&gt; done: ScenarioOutlineSteps.GivenIHaveEntered(20) (0,0s)
When I perform add
-&gt; done: ScenarioOutlineSteps.WhenIPressAdd() (0,0s)
Then the result should be 30
-&gt; done: ScenarioOutlineSteps.ThenTheResultShouldBe(30) (0,0s)
</output></test><test name="PicklesDoc.Pickles.Example.xUnit.Features._03ScenarioOutline.ScenarioOutlineFeature.AddTwoPositiveNumbersWithManyExamples(number1: &quot;20&quot;, number2: &quot;20&quot;, result: &quot;40&quot;, exampleTags: System.String[])" type="PicklesDoc.Pickles.Example.xUnit.Features._03ScenarioOutline.ScenarioOutlineFeature" method="AddTwoPositiveNumbersWithManyExamples" result="Pass" time="0.000"><traits><trait name="Description" value="Add two positive numbers with many examples" /><trait name="FeatureTitle" value="Scenario outline" /></traits><output>Given I enter 20 into the calculator
-&gt; done: ScenarioOutlineSteps.GivenIHaveEntered(20) (0,0s)
And I enter 20 into the calculator
-&gt; done: ScenarioOutlineSteps.GivenIHaveEntered(20) (0,0s)
When I perform add
-&gt; done: ScenarioOutlineSteps.WhenIPressAdd() (0,0s)
Then the result should be 40
-&gt; done: ScenarioOutlineSteps.ThenTheResultShouldBe(40) (0,0s)
</output></test><test name="PicklesDoc.Pickles.Example.xUnit.Features._03ScenarioOutline.ScenarioOutlineFeature.AddTwoPositiveNumbersWithManyExamples(number1: &quot;20&quot;, number2: &quot;30&quot;, result: &quot;50&quot;, exampleTags: System.String[])" type="PicklesDoc.Pickles.Example.xUnit.Features._03ScenarioOutline.ScenarioOutlineFeature" method="AddTwoPositiveNumbersWithManyExamples" result="Pass" time="0.000"><traits><trait name="Description" value="Add two positive numbers with many examples" /><trait name="FeatureTitle" value="Scenario outline" /></traits><output>Given I enter 20 into the calculator
-&gt; done: ScenarioOutlineSteps.GivenIHaveEntered(20) (0,0s)
And I enter 30 into the calculator
-&gt; done: ScenarioOutlineSteps.GivenIHaveEntered(30) (0,0s)
When I perform add
-&gt; done: ScenarioOutlineSteps.WhenIPressAdd() (0,0s)
Then the result should be 50
-&gt; done: ScenarioOutlineSteps.ThenTheResultShouldBe(50) (0,0s)
</output></test></class><class time="0.003" name="PicklesDoc.Pickles.Example.xUnit.Features._04Background.ShowTheUseOfBackgroundFeature" total="2" passed="2" failed="0" skipped="0"><test name="PicklesDoc.Pickles.Example.xUnit.Features._04Background.ShowTheUseOfBackgroundFeature.Add1ToTheSum" type="PicklesDoc.Pickles.Example.xUnit.Features._04Background.ShowTheUseOfBackgroundFeature" method="Add1ToTheSum" result="Pass" time="0.003"><traits><trait name="FeatureTitle" value="Show the use of background" /><trait name="Description" value="Add 1 to the sum" /></traits><output>Given I have initialized the Sum-variable to 0
-&gt; done: BackgroundSteps.InitiVariableToZero() (0,0s)
When I add 1 to the Sum-variable
-&gt; done: BackgroundSteps.AddIntegerToSum(1) (0,0s)
When I add 1 to the Sum-variable
-&gt; done: BackgroundSteps.AddIntegerToSum(1) (0,0s)
Then the total sum should be 2
-&gt; done: BackgroundSteps.ThenTheSumShouldBe(2) (0,0s)
</output></test><test name="PicklesDoc.Pickles.Example.xUnit.Features._04Background.ShowTheUseOfBackgroundFeature.Add2ToTheSum" type="PicklesDoc.Pickles.Example.xUnit.Features._04Background.ShowTheUseOfBackgroundFeature" method="Add2ToTheSum" result="Pass" time="0.000"><traits><trait name="Description" value="Add 2 to the sum" /><trait name="FeatureTitle" value="Show the use of background" /></traits><output>Given I have initialized the Sum-variable to 0
-&gt; done: BackgroundSteps.InitiVariableToZero() (0,0s)
When I add 1 to the Sum-variable
-&gt; done: BackgroundSteps.AddIntegerToSum(1) (0,0s)
When I add 2 to the Sum-variable
-&gt; done: BackgroundSteps.AddIntegerToSum(2) (0,0s)
Then the total sum should be 3
-&gt; done: BackgroundSteps.ThenTheSumShouldBe(3) (0,0s)
</output></test></class><class time="0.018" name="PicklesDoc.Pickles.Example.xUnit.Features._05TablesAndAssist.ShowingTableUsageFeature" total="4" passed="4" failed="0" skipped="0"><test name="PicklesDoc.Pickles.Example.xUnit.Features._05TablesAndAssist.ShowingTableUsageFeature.ExampleOfAWideTable" type="PicklesDoc.Pickles.Example.xUnit.Features._05TablesAndAssist.ShowingTableUsageFeature" method="ExampleOfAWideTable" result="Pass" time="0.002"><traits><trait name="Description" value="Example of a wide table" /><trait name="FeatureTitle" value="Showing table usage" /></traits><output>Given this wide table
  --- table step argument ---
  | Name   | Style     | Birth date | Cred | Name   | Style     | Birth date | Cred | Name   | Style     | Birth date | Cred | Name   | Style     | Birth date | Cred | Name   | Style     | Birth date | Cred | Name   | Style     | Birth date | Cred | Name   | Style     | Birth date | Cred | Name   | Style     | Birth date | Cred |
  | Marcus | Very cool | 10/9/1972  | 1000 | Marcus | Very cool | 10/9/1972  | 1000 | Marcus | Very cool | 10/9/1972  | 1000 | Marcus | Very cool | 10/9/1972  | 1000 | Marcus | Very cool | 10/9/1972  | 1000 | Marcus | Very cool | 10/9/1972  | 1000 | Marcus | Very cool | 10/9/1972  | 1000 | Marcus | Very cool | 10/9/1972  | 1000 |
TESTING: Yeah, what about the wide table? | Name   | Style     | Birth date | Cred | Name   | Style     | Birth date | Cred | Name   | Style     | Birth date | Cred | Name   | Style     | Birth date | Cred | Name   | Style     | Birth date | Cred | Name   | Style     | Birth date | Cred | Name   | Style     | Birth date | Cred | Name   | Style     | Birth date | Cred |
| Marcus | Very cool | 10/9/1972  | 1000 | Marcus | Very cool | 10/9/1972  | 1000 | Marcus | Very cool | 10/9/1972  | 1000 | Marcus | Very cool | 10/9/1972  | 1000 | Marcus | Very cool | 10/9/1972  | 1000 | Marcus | Very cool | 10/9/1972  | 1000 | Marcus | Very cool | 10/9/1972  | 1000 | Marcus | Very cool | 10/9/1972  | 1000 |

-&gt; done: TableSteps.GivenThisWideTable(&lt;table&gt;) (0,0s)
</output></test><test name="PicklesDoc.Pickles.Example.xUnit.Features._05TablesAndAssist.ShowingTableUsageFeature.UsingTables" type="PicklesDoc.Pickles.Example.xUnit.Features._05TablesAndAssist.ShowingTableUsageFeature" method="UsingTables" result="Pass" time="0.005"><traits><trait name="FeatureTitle" value="Showing table usage" /><trait name="Description" value="Using tables" /></traits><output>Given I have the following persons
  --- table step argument ---
  | Name   | Style | Birth date | Cred |
  | Marcus | Cool  | 1972-10-09 | 50   |
  | Anders | Butch | 1977-01-01 | 500  |
  | Jocke  | Soft  | 1974-04-04 | 1000 |
-&gt; done: TableSteps.IHaveTheFollowingPersons(&lt;table&gt;) (0,0s)
When I search for Jocke
-&gt; done: TableSteps.ISearchFor("Jocke") (0,0s)
Then the following person should be returned
  --- table step argument ---
  | Name  | Style | Birth date | Cred |
  | Jocke | Soft  | 1974-04-04 | 1000 |
-&gt; done: TableSteps.ThenTheResultShouldBeReturned(&lt;table&gt;) (0,0s)
</output></test><test name="PicklesDoc.Pickles.Example.xUnit.Features._05TablesAndAssist.ShowingTableUsageFeature.CreatingAEntityFromFieldValue" type="PicklesDoc.Pickles.Example.xUnit.Features._05TablesAndAssist.ShowingTableUsageFeature" method="CreatingAEntityFromFieldValue" result="Pass" time="0.008"><traits><trait name="Description" value="Creating a entity from field value" /><trait name="FeatureTitle" value="Showing table usage" /></traits><output>When I fill out the form like this
  --- table step argument ---
  | Field      | Value      |
  | Name       | Marcus     |
  | Style      | very cool  |
  | Birth date | 1972-10-09 |
  | Cred       | 100        |
-&gt; done: TableSteps.FillOutTheForm(&lt;table&gt;) (0,0s)
Then the following person should be returned using assist
  --- table step argument ---
  | Name   | Style     | Birth date | Cred |
  | Marcus | Very cool | 1972-10-09 | 1000 |
-&gt; done: TableSteps.ThenTheResultShouldBeReturnedAssist(&lt;table&gt;) (0,0s)
</output></test><test name="PicklesDoc.Pickles.Example.xUnit.Features._05TablesAndAssist.ShowingTableUsageFeature.UsingTablesWithSpecFlowAssist" type="PicklesDoc.Pickles.Example.xUnit.Features._05TablesAndAssist.ShowingTableUsageFeature" method="UsingTablesWithSpecFlowAssist" result="Pass" time="0.003"><traits><trait name="FeatureTitle" value="Showing table usage" /><trait name="Description" value="Using tables with SpecFlow Assist" /></traits><output>Given I have the following persons using assist
  --- table step argument ---
  | Name   | Style     | Birth date | Cred |
  | Marcus | Very cool | 1972-10-09 | 50   |
  | Anders | Butch     | 1977-01-01 | 500  |
  | Jocke  | Soft      | 1974-04-04 | 1000 |
-&gt; done: TableSteps.IHaveTheFollowingPersonsAssist(&lt;table&gt;) (0,0s)
When I search for Jocke
-&gt; done: TableSteps.ISearchFor("Jocke") (0,0s)
Then the following person should be returned using assist
  --- table step argument ---
  | Name  | Style | Birth date | Cred |
  | Jocke | Soft  | 1974-04-04 | 1000 |
-&gt; done: TableSteps.ThenTheResultShouldBeReturnedAssist(&lt;table&gt;) (0,0s)
</output></test></class><class time="0.032" name="PicklesDoc.Pickles.Example.xUnit.Features._06CompareToAssist.ShowTheCompareToFeatureFeature" total="2" passed="2" failed="0" skipped="0"><test name="PicklesDoc.Pickles.Example.xUnit.Features._06CompareToAssist.ShowTheCompareToFeatureFeature.CompareToSet" type="PicklesDoc.Pickles.Example.xUnit.Features._06CompareToAssist.ShowTheCompareToFeatureFeature" method="CompareToSet" result="Pass" time="0.027"><traits><trait name="Description" value="CompareToSet" /><trait name="FeatureTitle" value="Show the compare to feature" /></traits><output>Given I have the following persons using assist
  --- table step argument ---
  | Name   | Style | Birth date |
  | Marcus | Cool  | 1972-10-09 |
  | Anders | Butch | 1977-01-01 |
  | Jocke  | Soft  | 1974-04-04 |
-&gt; done: TableSteps.IHaveTheFollowingPersonsAssist(&lt;table&gt;) (0,0s)
Then CompareToSet should match this
  --- table step argument ---
  | Name   | Style | BirthDate             |
  | Marcus | Cool  | 10/9/1972 12:00:00 AM |
  | Anders | Butch | 1/1/1977 12:00:00 AM  |
  | Jocke  | Soft  | 4/4/1974 12:00:00 AM  |
-&gt; done: CompareToSteps.CompareToSetShouldMatch(&lt;table&gt;) (0,0s)
But CompareToSet should not match this
  --- table step argument ---
  | Name   | Style | BirthDate             |
  | Marcus | Cool  | 10/9/1972 12:00:00 AM |
  | Anders | Butch | 1/1/1977 12:00:00 AM  |
-&gt; done: CompareToSteps.CompareToSetShouldNotMatch(&lt;table&gt;) (0,0s)
</output></test><test name="PicklesDoc.Pickles.Example.xUnit.Features._06CompareToAssist.ShowTheCompareToFeatureFeature.CompareToInstance" type="PicklesDoc.Pickles.Example.xUnit.Features._06CompareToAssist.ShowTheCompareToFeatureFeature" method="CompareToInstance" result="Pass" time="0.005"><traits><trait name="FeatureTitle" value="Show the compare to feature" /><trait name="Description" value="CompareToInstance" /></traits><output>Given I have the following person
  --- table step argument ---
  | Field      | Value      |
  | Name       | Marcus     |
  | Style      | Butch      |
  | Birth date | 1972-10-09 |
-&gt; done: CompareToSteps.GivenIHaveTheFollowingPerson(&lt;table&gt;) (0,0s)
Then CompareToInstance should match this guy
  --- table step argument ---
  | Field     | Value                 |
  | Name      | Marcus                |
  | Style     | Butch                 |
  | BirthDate | 10/9/1972 12:00:00 AM |
-&gt; done: CompareToSteps.CompareToInstanceShouldMatch(&lt;table&gt;) (0,0s)
And CompareToInstance should match this guy
  --- table step argument ---
  | Field     | Value                 |
  | Name      | Marcus                |
  | BirthDate | 10/9/1972 12:00:00 AM |
-&gt; done: CompareToSteps.CompareToInstanceShouldMatch(&lt;table&gt;) (0,0s)
But CompareToInstance should not match this guy
  --- table step argument ---
  | Field     | Value                 |
  | Name      | Anders                |
  | Style     | very cool             |
  | BirthDate | 10/9/1974 12:00:00 AM |
-&gt; done: CompareToSteps.CompareToInstanceShouldNotMatch(&lt;table&gt;) (0,0s)
</output></test></class><class time="0.003" name="PicklesDoc.Pickles.Example.xUnit.Features._07Svenska.SummeringFeature" total="1" passed="1" failed="0" skipped="0"><test name="PicklesDoc.Pickles.Example.xUnit.Features._07Svenska.SummeringFeature.Summera5Och7SkaVara12" type="PicklesDoc.Pickles.Example.xUnit.Features._07Svenska.SummeringFeature" method="Summera5Och7SkaVara12" result="Pass" time="0.003"><traits><trait name="Description" value="Summera 5 och 7 ska vara 12" /><trait name="FeatureTitle" value="Summering" /></traits><output>Givet att jag har knappat in 5
-&gt; done: SvenskaSteg.GivetAttJagHarKnappatInTal(5) (0,0s)
Och att jag har knappat in 7
-&gt; done: SvenskaSteg.GivetAttJagHarKnappatInTal(7) (0,0s)
När jag summerar
-&gt; done: SvenskaSteg.NarJagSummerar() (0,0s)
Så ska resultatet vara 12
-&gt; done: SvenskaSteg.SaSkaResultatetVara(12) (0,0s)
</output></test></class><class time="0.004" name="PicklesDoc.Pickles.Example.xUnit.Features._08AttributeOverloading.AttributeOverloadingFeature" total="1" passed="1" failed="0" skipped="0"><test name="PicklesDoc.Pickles.Example.xUnit.Features._08AttributeOverloading.AttributeOverloadingFeature.CheckingNumberForEvenness" type="PicklesDoc.Pickles.Example.xUnit.Features._08AttributeOverloading.AttributeOverloadingFeature" method="CheckingNumberForEvenness" result="Pass" time="0.004"><traits><trait name="Description" value="Checking number for evenness" /><trait name="FeatureTitle" value="Attribute overloading" /></traits><output>Given I have this simple step
-&gt; done: AttributeOverloadingSteps.ASimpleStep() (0,0s)
And this simple step
-&gt; done: AttributeOverloadingSteps.ASimpleStep() (0,0s)
And also this step
-&gt; done: AttributeOverloadingSteps.ASimpleStep() (0,0s)
When I do something
-&gt; done: AttributeOverloadingSteps.WhenIDoSomething() (0,0s)
Then I could validate that the number 2 is even
-&gt; done: AttributeOverloadingSteps.ValidateOddOrEven(2, "even") (0,0s)
And that the number 4 is even
-&gt; done: AttributeOverloadingSteps.ValidateOddOrEven(4, "even") (0,0s)
But the number 3 is odd
-&gt; done: AttributeOverloadingSteps.ValidateOddOrEven(3, "odd") (0,0s)
</output></test></class><class time="0.042" name="PicklesDoc.Pickles.Example.xUnit.Features._09CallingStepsFromSteps.CallingStepsFromStepDefinitionsFeature" total="2" passed="2" failed="0" skipped="0"><test name="PicklesDoc.Pickles.Example.xUnit.Features._09CallingStepsFromSteps.CallingStepsFromStepDefinitionsFeature.DoSomethingMeaningful" type="PicklesDoc.Pickles.Example.xUnit.Features._09CallingStepsFromSteps.CallingStepsFromStepDefinitionsFeature" method="DoSomethingMeaningful" result="Pass" time="0.041"><traits><trait name="Description" value="Do something meaningful" /><trait name="FeatureTitle" value="Calling Steps from StepDefinitions" /></traits><output>Given I am logged in
Given I am on the index page
-&gt; done: CallingStepsFromStepDefinitionSteps.GivenIAmOnTheIndexPage() (0.0s)
When I enter my unsername nad password
-&gt; done: CallingStepsFromStepDefinitionSteps.WhenIEnterMyUnsernameNadPassword() (0.0s)
And I click the login button
-&gt; done: CallingStepsFromStepDefinitionSteps.WhenIClickTheLoginButton() (0.0s)
-&gt; done: CallingStepsFromStepDefinitionSteps.GivenIAmLoggedIn() (0,0s)
When I dosomething meaningful
-&gt; done: CallingStepsFromStepDefinitionSteps.WhenIDosomethingMeaningful() (0,0s)
Then I should get rewarded
-&gt; done: CallingStepsFromStepDefinitionSteps.ThenIShouldbeRewarded() (0,0s)
</output></test><test name="PicklesDoc.Pickles.Example.xUnit.Features._09CallingStepsFromSteps.CallingStepsFromStepDefinitionsFeature.LogIn" type="PicklesDoc.Pickles.Example.xUnit.Features._09CallingStepsFromSteps.CallingStepsFromStepDefinitionsFeature" method="LogIn" result="Pass" time="0.001"><traits><trait name="FeatureTitle" value="Calling Steps from StepDefinitions" /><trait name="Description" value="Log in" /></traits><output>Given I am on the index page
-&gt; done: CallingStepsFromStepDefinitionSteps.GivenIAmOnTheIndexPage() (0,0s)
When I enter my unsername nad password
-&gt; done: CallingStepsFromStepDefinitionSteps.WhenIEnterMyUnsernameNadPassword() (0,0s)
And I click the login button
-&gt; done: CallingStepsFromStepDefinitionSteps.WhenIClickTheLoginButton() (0,0s)
Then the welcome page should be displayed
-&gt; done: CallingStepsFromStepDefinitionSteps.ThenTheWelcomePageShouldBeDisplayed() (0,0s)
</output></test></class><class time="0.014" name="PicklesDoc.Pickles.Example.xUnit.Features._10StepTransformation.StepArgumentTransformationsFeature" total="1" passed="1" failed="0" skipped="0"><test name="PicklesDoc.Pickles.Example.xUnit.Features._10StepTransformation.StepArgumentTransformationsFeature.StepsWithNon_StringArguments" type="PicklesDoc.Pickles.Example.xUnit.Features._10StepTransformation.StepArgumentTransformationsFeature" method="StepsWithNon_StringArguments" result="Pass" time="0.014"><traits><trait name="Description" value="Steps with non-string arguments" /><trait name="FeatureTitle" value="Step Argument Transformations" /></traits><output>Given Dan has been registered at date 2003/03/13
-&gt; done: StepArgumentTransformationSteps.RegistrationStep(Specs.StepTransfo..., 2003-03-13 00:00:00) (0,0s)
And Aslak has been registered at terminal 2
-&gt; done: StepArgumentTransformationSteps.RegistrationStep(Specs.StepTransfo..., Specs.StepTransfo...) (0,0s)
Then I should be able to see Aslak at terminal 2
-&gt; done: StepArgumentTransformationSteps.SeeUserAtTerminal(Specs.StepTransfo..., Specs.StepTransfo...) (0,0s)
</output></test></class><class time="0.011" name="PicklesDoc.Pickles.Example.xUnit.Features._11ContextInjection.InjectingContextIntoStepSpecificationsFeature" total="5" passed="5" failed="0" skipped="0"><test name="PicklesDoc.Pickles.Example.xUnit.Features._11ContextInjection.InjectingContextIntoStepSpecificationsFeature.FeatureWithASingleContext" type="PicklesDoc.Pickles.Example.xUnit.Features._11ContextInjection.InjectingContextIntoStepSpecificationsFeature" method="FeatureWithASingleContext" result="Pass" time="0.002"><traits><trait name="Description" value="Feature with a single context" /><trait name="FeatureTitle" value="Injecting context into step specifications" /></traits><output>Given a feature which requires a single context
-&gt; done: FeatureWithASingleContextSteps.GivenAFeatureWhichRequiresASingleContext() (0,0s)
Then the context is set
-&gt; done: FeatureWithASingleContextSteps.ThenTheContextIsSet() (0,0s)
</output></test><test name="PicklesDoc.Pickles.Example.xUnit.Features._11ContextInjection.InjectingContextIntoStepSpecificationsFeature.FeatureWithNoContext" type="PicklesDoc.Pickles.Example.xUnit.Features._11ContextInjection.InjectingContextIntoStepSpecificationsFeature" method="FeatureWithNoContext" result="Pass" time="0.001"><traits><trait name="Description" value="Feature with no context" /><trait name="FeatureTitle" value="Injecting context into step specifications" /></traits><output>Given a feature which requires no context
-&gt; done: FeatureWithNoContextSteps.GivenAFeatureWhichRequiresNoContext() (0,0s)
Then everything is dandy
-&gt; done: FeatureWithNoContextSteps.ThenEverythingIsDandy() (0,0s)
</output></test><test name="PicklesDoc.Pickles.Example.xUnit.Features._11ContextInjection.InjectingContextIntoStepSpecificationsFeature.FeatureWithADependentContext" type="PicklesDoc.Pickles.Example.xUnit.Features._11ContextInjection.InjectingContextIntoStepSpecificationsFeature" method="FeatureWithADependentContext" result="Pass" time="0.003"><traits><trait name="Description" value="Feature with a dependent context" /><trait name="FeatureTitle" value="Injecting context into step specifications" /></traits><output>Given a feature which requires a single context
-&gt; done: FeatureWithASingleContextSteps.GivenAFeatureWhichRequiresASingleContext() (0,0s)
Then the context is set
-&gt; done: FeatureWithASingleContextSteps.ThenTheContextIsSet() (0,0s)
And the context was created by the feature with a single context scenario
-&gt; done: FeatureWithADependentContextSteps.ThenTheContextWasCreatedByTheFeatureWithASingleContextScenario() (0,0s)
</output></test><test name="PicklesDoc.Pickles.Example.xUnit.Features._11ContextInjection.InjectingContextIntoStepSpecificationsFeature.FeatureWithMultipleContexts" type="PicklesDoc.Pickles.Example.xUnit.Features._11ContextInjection.InjectingContextIntoStepSpecificationsFeature" method="FeatureWithMultipleContexts" result="Pass" time="0.002"><traits><trait name="FeatureTitle" value="Injecting context into step specifications" /><trait name="Description" value="Feature with multiple contexts" /></traits><output>Given a feature which requires multiple contexts
-&gt; done: FeatureWithMultipleContextsSteps.GivenAFeatureWhichRequiresMultipleContexts() (0,0s)
Then the contexts are set
-&gt; done: FeatureWithMultipleContextsSteps.ThenTheContextsAreSet() (0,0s)
</output></test><test name="PicklesDoc.Pickles.Example.xUnit.Features._11ContextInjection.InjectingContextIntoStepSpecificationsFeature.FeatureWithRecursiveContexts" type="PicklesDoc.Pickles.Example.xUnit.Features._11ContextInjection.InjectingContextIntoStepSpecificationsFeature" method="FeatureWithRecursiveContexts" result="Pass" time="0.003"><traits><trait name="Description" value="Feature with recursive contexts" /><trait name="FeatureTitle" value="Injecting context into step specifications" /></traits><output>Given a feature which requires a recursive context
-&gt; done: FeatureWithARecursiveContextSteps.GivenAFeatureWhichRequiresARecursiveContext() (0,0s)
Then the context is set
-&gt; done: FeatureWithASingleContextSteps.ThenTheContextIsSet() (0,0s)
And its sub-context is set
-&gt; done: FeatureWithARecursiveContextSteps.ThenItsSubContextIsSet() (0,0s)
</output></test></class><class time="0.005" name="PicklesDoc.Pickles.Example.xUnit.Features._12NestedFolders.ChildFolder.ChildChildFolder.NestedFolderExampleFeature" total="1" passed="1" failed="0" skipped="0"><test name="PicklesDoc.Pickles.Example.xUnit.Features._12NestedFolders.ChildFolder.ChildChildFolder.NestedFolderExampleFeature.Nested_AddTwoNumbers" type="PicklesDoc.Pickles.Example.xUnit.Features._12NestedFolders.ChildFolder.ChildChildFolder.NestedFolderExampleFeature" method="Nested_AddTwoNumbers" result="Pass" time="0.005"><traits><trait name="FeatureTitle" value="Nested Folder Example" /><trait name="Description" value="Nested - Add two numbers" /></traits><output>Given I have entered 50 into the calculator
-&gt; done: Steps.GivenIHaveEnteredSomethingIntoTheCalculator(50) (0,0s)
And I have entered 70 into the calculator
-&gt; done: Steps.GivenIHaveEnteredSomethingIntoTheCalculator(70) (0,0s)
When I press add
-&gt; done: Steps.WhenIPressAdd("add") (0,0s)
Then the result should be 120 on the screen
-&gt; done: Steps.ThenTheResultShouldBe(120) (0,0s)
</output></test></class><class time="0.002" name="PicklesDoc.Pickles.Example.xUnit.Features._13MultilineText.MultilineFeatureExampleFeature" total="1" passed="1" failed="0" skipped="0"><test name="PicklesDoc.Pickles.Example.xUnit.Features._13MultilineText.MultilineFeatureExampleFeature.MutlilineOutput" type="PicklesDoc.Pickles.Example.xUnit.Features._13MultilineText.MultilineFeatureExampleFeature" method="MutlilineOutput" result="Pass" time="0.002"><traits><trait name="FeatureTitle" value="Multiline Feature Example" /><trait name="Description" value="Mutliline Output" /></traits><output>Given I have read in some text from the user
  --- multiline step argument ---
  This is line 1.
This is line 2!
This is line 3!!
-&gt; done: MultiLineSteps.GivenIHaveReadInSomeTextFromTheUser("This is line 1.
T...") (0,0s)
When I process this input
TESTING: Processing 'This is line 1.
This is line 2!
This is line 3!!'
-&gt; done: MultiLineSteps.WhenIProcessThisInput() (0,0s)
Then the result will be saved to the multiline text data store
TESTING: Saving: This is line 1.
This is line 2!
This is line 3!!
-&gt; done: MultiLineSteps.ThenTheResultWillBeSavedToTheMultilineTextDataStore() (0,0s)
</output></test></class><class time="0.005" name="PicklesDoc.Pickles.Example.xUnit.Features.ArithmeticFeature" total="4" passed="4" failed="0" skipped="0"><test name="PicklesDoc.Pickles.Example.xUnit.Features.ArithmeticFeature.DivideTwoNumbers" type="PicklesDoc.Pickles.Example.xUnit.Features.ArithmeticFeature" method="DivideTwoNumbers" result="Pass" time="0.001"><traits><trait name="FeatureTitle" value="Arithmetic" /><trait name="Description" value="Divide two numbers" /></traits><output>Given I have entered 50 into the calculator
-&gt; done: Steps.GivenIHaveEnteredSomethingIntoTheCalculator(50) (0,0s)
And I have entered 2 into the calculator
-&gt; done: Steps.GivenIHaveEnteredSomethingIntoTheCalculator(2) (0,0s)
When I press divide
-&gt; done: Steps.WhenIPressAdd("divide") (0,0s)
Then the result should be 25 on the screen
-&gt; done: Steps.ThenTheResultShouldBe(25) (0,0s)
</output></test><test name="PicklesDoc.Pickles.Example.xUnit.Features.ArithmeticFeature.MultiplyTwoNumbers" type="PicklesDoc.Pickles.Example.xUnit.Features.ArithmeticFeature" method="MultiplyTwoNumbers" result="Pass" time="0.002"><traits><trait name="FeatureTitle" value="Arithmetic" /><trait name="Description" value="Multiply two numbers" /></traits><output>Given I have entered 50 into the calculator
-&gt; done: Steps.GivenIHaveEnteredSomethingIntoTheCalculator(50) (0,0s)
And I have entered 70 into the calculator
-&gt; done: Steps.GivenIHaveEnteredSomethingIntoTheCalculator(70) (0,0s)
When I press multiply
-&gt; done: Steps.WhenIPressAdd("multiply") (0,0s)
Then the result should be 3500 on the screen
-&gt; done: Steps.ThenTheResultShouldBe(3500) (0,0s)
</output></test><test name="PicklesDoc.Pickles.Example.xUnit.Features.ArithmeticFeature.SubtractTwoNumbers" type="PicklesDoc.Pickles.Example.xUnit.Features.ArithmeticFeature" method="SubtractTwoNumbers" result="Pass" time="0.001"><traits><trait name="Description" value="Subtract two numbers" /><trait name="FeatureTitle" value="Arithmetic" /></traits><output>Given I have entered 50 into the calculator
-&gt; done: Steps.GivenIHaveEnteredSomethingIntoTheCalculator(50) (0,0s)
And I have entered 70 into the calculator
-&gt; done: Steps.GivenIHaveEnteredSomethingIntoTheCalculator(70) (0,0s)
When I press subtract
-&gt; done: Steps.WhenIPressAdd("subtract") (0,0s)
Then the result should be -20 on the screen
-&gt; done: Steps.ThenTheResultShouldBe(-20) (0,0s)
</output></test><test name="PicklesDoc.Pickles.Example.xUnit.Features.ArithmeticFeature.AddTwoNumbers" type="PicklesDoc.Pickles.Example.xUnit.Features.ArithmeticFeature" method="AddTwoNumbers" result="Pass" time="0.001"><traits><trait name="FeatureTitle" value="Arithmetic" /><trait name="Description" value="Add two numbers" /></traits><output>Given I have entered 50 into the calculator
-&gt; done: Steps.GivenIHaveEnteredSomethingIntoTheCalculator(50) (0,0s)
And I have entered 70 into the calculator
-&gt; done: Steps.GivenIHaveEnteredSomethingIntoTheCalculator(70) (0,0s)
When I press add
-&gt; done: Steps.WhenIPressAdd("add") (0,0s)
Then the result should be 120 on the screen
-&gt; done: Steps.ThenTheResultShouldBe(120) (0,0s)
</output></test></class><class time="0.003" name="PicklesDoc.Pickles.Example.xUnit.Features.TrigonometryFeature" total="3" passed="3" failed="0" skipped="0"><test name="PicklesDoc.Pickles.Example.xUnit.Features.TrigonometryFeature.Sine" type="PicklesDoc.Pickles.Example.xUnit.Features.TrigonometryFeature" method="Sine" result="Pass" time="0.002"><traits><trait name="FeatureTitle" value="Trigonometry" /><trait name="Description" value="Sine" /></traits><output>Given I have entered 90 into the calculator
-&gt; done: Steps.GivenIHaveEnteredSomethingIntoTheCalculator(90) (0,0s)
When I press sin
-&gt; done: Steps.WhenIPressAdd("sin") (0,0s)
Then the result should be 1 on the screen
-&gt; done: Steps.ThenTheResultShouldBe(1) (0,0s)
</output></test><test name="PicklesDoc.Pickles.Example.xUnit.Features.TrigonometryFeature.Tangent" type="PicklesDoc.Pickles.Example.xUnit.Features.TrigonometryFeature" method="Tangent" result="Pass" time="0.001"><traits><trait name="Description" value="Tangent" /><trait name="FeatureTitle" value="Trigonometry" /></traits><output>Given I have entered 45 into the calculator
-&gt; done: Steps.GivenIHaveEnteredSomethingIntoTheCalculator(45) (0,0s)
When I press tan
-&gt; done: Steps.WhenIPressAdd("tan") (0,0s)
Then the result should be 1 on the screen
-&gt; done: Steps.ThenTheResultShouldBe(1) (0,0s)
</output></test><test name="PicklesDoc.Pickles.Example.xUnit.Features.TrigonometryFeature.Cosine" type="PicklesDoc.Pickles.Example.xUnit.Features.TrigonometryFeature" method="Cosine" result="Pass" time="0.000"><traits><trait name="Description" value="Cosine" /><trait name="FeatureTitle" value="Trigonometry" /></traits><output>Given I have entered 0 into the calculator
-&gt; done: Steps.GivenIHaveEnteredSomethingIntoTheCalculator(0) (0,0s)
When I press cos
-&gt; done: Steps.WhenIPressAdd("cos") (0,0s)
Then the result should be 1 on the screen
-&gt; done: Steps.ThenTheResultShouldBe(1) (0,0s)
</output></test></class><class time="0.002" name="PicklesDoc.Pickles.Example.xUnit.Features.Workflow.ClearingScreenFeature" total="1" passed="1" failed="0" skipped="0"><test name="PicklesDoc.Pickles.Example.xUnit.Features.Workflow.ClearingScreenFeature.ClearTheScreen" type="PicklesDoc.Pickles.Example.xUnit.Features.Workflow.ClearingScreenFeature" method="ClearTheScreen" result="Pass" time="0.002"><traits><trait name="FeatureTitle" value="Clearing Screen" /><trait name="Description" value="Clear the screen" /></traits><output>Given I have entered 50 into the calculator
-&gt; done: Steps.GivenIHaveEnteredSomethingIntoTheCalculator(50) (0,0s)
And I have entered 70 into the calculator
-&gt; done: Steps.GivenIHaveEnteredSomethingIntoTheCalculator(70) (0,0s)
When I press C
-&gt; done: Steps.WhenIPressAdd("C") (0,0s)
Then the screen should be empty
-&gt; done: Steps.ThenTheScreenShouldBeEmpty() (0,0s)
</output></test></class></assembly>