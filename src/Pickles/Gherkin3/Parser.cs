// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Berp (http://https://github.com/gasparnagy/berp/).
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
using System;
using System.Collections.Generic;

namespace Gherkin3
{
    public enum TokenType
    {
        None,
        EOF,
        Empty,
        Comment,
        TagLine,
        FeatureLine,
        BackgroundLine,
        ScenarioLine,
        ScenarioOutlineLine,
        ExamplesLine,
        StepLine,
        DocStringSeparator,
        TableRow,
        Language,
        Other,
    }

    public enum RuleType
    {
        None,
        _EOF, // #EOF
        _Empty, // #Empty
        _Comment, // #Comment
        _TagLine, // #TagLine
        _FeatureLine, // #FeatureLine
        _BackgroundLine, // #BackgroundLine
        _ScenarioLine, // #ScenarioLine
        _ScenarioOutlineLine, // #ScenarioOutlineLine
        _ExamplesLine, // #ExamplesLine
        _StepLine, // #StepLine
        _DocStringSeparator, // #DocStringSeparator
        _TableRow, // #TableRow
        _Language, // #Language
        _Other, // #Other
        Feature, // Feature! := Feature_Header Background? Scenario_Definition*
        Feature_Header, // Feature_Header! := #Language? Tags? #FeatureLine Feature_Description
        Background, // Background! := #BackgroundLine Background_Description Scenario_Step*
        Scenario_Definition, // Scenario_Definition! := Tags? (Scenario | ScenarioOutline)
        Scenario, // Scenario! := #ScenarioLine Scenario_Description Scenario_Step*
        ScenarioOutline, // ScenarioOutline! := #ScenarioOutlineLine ScenarioOutline_Description ScenarioOutline_Step* Examples_Definition+
        Examples_Definition, // Examples_Definition! [#Empty|#Comment|#TagLine-&gt;#ExamplesLine] := Tags? Examples
        Examples, // Examples! := #ExamplesLine Examples_Description #TableRow #TableRow+
        Scenario_Step, // Scenario_Step := Step
        ScenarioOutline_Step, // ScenarioOutline_Step := Step
        Step, // Step! := #StepLine Step_Arg?
        Step_Arg, // Step_Arg := (DataTable | DocString)
        DataTable, // DataTable! := #TableRow+
        DocString, // DocString! := #DocStringSeparator #Other* #DocStringSeparator
        Tags, // Tags! := #TagLine+
        Feature_Description, // Feature_Description := Description_Helper
        Background_Description, // Background_Description := Description_Helper
        Scenario_Description, // Scenario_Description := Description_Helper
        ScenarioOutline_Description, // ScenarioOutline_Description := Description_Helper
        Examples_Description, // Examples_Description := Description_Helper
        Description_Helper, // Description_Helper := #Empty* Description? #Comment*
        Description, // Description! := #Other+
    }

    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class Parser<T>
    {
        public bool StopAtFirstError { get; set;}

        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        protected class ParserContext
        {
            public ITokenScanner TokenScanner { get; set; }
            public ITokenMatcher TokenMatcher { get; set; }
            public IAstBuilder<T> Builder { get; set; }
            public Queue<Token> TokenQueue { get; set; }
            public List<ParserException> Errors { get; set; }
        }

        public T Parse(ITokenScanner tokenScanner)
        {
            return this.Parse(tokenScanner, new TokenMatcher(), new AstBuilder<T>());
        }

        public T Parse(ITokenScanner tokenScanner, ITokenMatcher tokenMatcher, IAstBuilder<T> astBuilder)
        {
            var context = new ParserContext
            {
                TokenScanner = tokenScanner,
                TokenMatcher = tokenMatcher,
                Builder = astBuilder,
                TokenQueue = new Queue<Token>(),
                Errors = new List<ParserException>()
            };

            this.StartRule(context, RuleType.Feature);
            int state = 0;
            Token token;
            do
            {
                token = this.ReadToken(context);
                state = this.MatchToken(state, token, context);
            } while(!token.IsEOF);

            this.EndRule(context, RuleType.Feature);

            if (context.Errors.Count > 0)
            {
                throw new CompositeParserException(context.Errors.ToArray());
            }

            return this.GetResult(context);
        }

        private void AddError(ParserContext context, ParserException error)
        {
            context.Errors.Add(error);
            if (context.Errors.Count > 10)
                throw new CompositeParserException(context.Errors.ToArray());
        }

        private void HandleAstError(ParserContext context, Action action)
        {
            this.HandleExternalError(context, () => { action(); return true; });
        }

        private T HandleExternalError<T>(ParserContext context, Func<T> action, T defaultValue = default(T))
        {
            if (this.StopAtFirstError)
            {
                return action();
            }

            try
            {
                return action();
            }
            catch (CompositeParserException compositeParserException)
            {
                foreach (var error in compositeParserException.Errors)
                    this.AddError(context, error);
            }
            catch (ParserException error)
            {
                this.AddError(context, error);
            }
            return defaultValue;
        }

        void Build(ParserContext context, Token token)
        {
            this.HandleAstError(context, () => context.Builder.Build(token));
        }

        void StartRule(ParserContext context, RuleType ruleType)
        {
            this.HandleAstError(context, () => context.Builder.StartRule(ruleType));
        }

        void EndRule(ParserContext context, RuleType ruleType)
        {
            this.HandleAstError(context, () => context.Builder.EndRule(ruleType));
        }

        T GetResult(ParserContext context)
        {
            return context.Builder.GetResult();
        }

        Token ReadToken(ParserContext context)
        {
            return context.TokenQueue.Count > 0 ? context.TokenQueue.Dequeue() : context.TokenScanner.Read();
        }


        bool Match_EOF(ParserContext context, Token token)
        {
            return this.HandleExternalError(context, () => context.TokenMatcher.Match_EOF(token), false); 
        }

        bool Match_Empty(ParserContext context, Token token)
        {
            if (token.IsEOF) return false;
            return this.HandleExternalError(context, () => context.TokenMatcher.Match_Empty(token), false); 
        }

        bool Match_Comment(ParserContext context, Token token)
        {
            if (token.IsEOF) return false;
            return this.HandleExternalError(context, () => context.TokenMatcher.Match_Comment(token), false); 
        }

        bool Match_TagLine(ParserContext context, Token token)
        {
            if (token.IsEOF) return false;
            return this.HandleExternalError(context, () => context.TokenMatcher.Match_TagLine(token), false); 
        }

        bool Match_FeatureLine(ParserContext context, Token token)
        {
            if (token.IsEOF) return false;
            return this.HandleExternalError(context, () => context.TokenMatcher.Match_FeatureLine(token), false); 
        }

        bool Match_BackgroundLine(ParserContext context, Token token)
        {
            if (token.IsEOF) return false;
            return this.HandleExternalError(context, () => context.TokenMatcher.Match_BackgroundLine(token), false); 
        }

        bool Match_ScenarioLine(ParserContext context, Token token)
        {
            if (token.IsEOF) return false;
            return this.HandleExternalError(context, () => context.TokenMatcher.Match_ScenarioLine(token), false); 
        }

        bool Match_ScenarioOutlineLine(ParserContext context, Token token)
        {
            if (token.IsEOF) return false;
            return this.HandleExternalError(context, () => context.TokenMatcher.Match_ScenarioOutlineLine(token), false); 
        }

        bool Match_ExamplesLine(ParserContext context, Token token)
        {
            if (token.IsEOF) return false;
            return this.HandleExternalError(context, () => context.TokenMatcher.Match_ExamplesLine(token), false); 
        }

        bool Match_StepLine(ParserContext context, Token token)
        {
            if (token.IsEOF) return false;
            return this.HandleExternalError(context, () => context.TokenMatcher.Match_StepLine(token), false); 
        }

        bool Match_DocStringSeparator(ParserContext context, Token token)
        {
            if (token.IsEOF) return false;
            return this.HandleExternalError(context, () => context.TokenMatcher.Match_DocStringSeparator(token), false); 
        }

        bool Match_TableRow(ParserContext context, Token token)
        {
            if (token.IsEOF) return false;
            return this.HandleExternalError(context, () => context.TokenMatcher.Match_TableRow(token), false); 
        }

        bool Match_Language(ParserContext context, Token token)
        {
            if (token.IsEOF) return false;
            return this.HandleExternalError(context, () => context.TokenMatcher.Match_Language(token), false); 
        }

        bool Match_Other(ParserContext context, Token token)
        {
            if (token.IsEOF) return false;
            return this.HandleExternalError(context, () => context.TokenMatcher.Match_Other(token), false); 
        }

        protected virtual int MatchToken(int state, Token token, ParserContext context)
        {
            int newState;
            switch(state)
            {
                case 0:
                    newState = this.MatchTokenAt_0(token, context);
                    break;
                case 1:
                    newState = this.MatchTokenAt_1(token, context);
                    break;
                case 2:
                    newState = this.MatchTokenAt_2(token, context);
                    break;
                case 3:
                    newState = this.MatchTokenAt_3(token, context);
                    break;
                case 4:
                    newState = this.MatchTokenAt_4(token, context);
                    break;
                case 5:
                    newState = this.MatchTokenAt_5(token, context);
                    break;
                case 6:
                    newState = this.MatchTokenAt_6(token, context);
                    break;
                case 7:
                    newState = this.MatchTokenAt_7(token, context);
                    break;
                case 8:
                    newState = this.MatchTokenAt_8(token, context);
                    break;
                case 9:
                    newState = this.MatchTokenAt_9(token, context);
                    break;
                case 10:
                    newState = this.MatchTokenAt_10(token, context);
                    break;
                case 11:
                    newState = this.MatchTokenAt_11(token, context);
                    break;
                case 12:
                    newState = this.MatchTokenAt_12(token, context);
                    break;
                case 13:
                    newState = this.MatchTokenAt_13(token, context);
                    break;
                case 14:
                    newState = this.MatchTokenAt_14(token, context);
                    break;
                case 15:
                    newState = this.MatchTokenAt_15(token, context);
                    break;
                case 16:
                    newState = this.MatchTokenAt_16(token, context);
                    break;
                case 17:
                    newState = this.MatchTokenAt_17(token, context);
                    break;
                case 18:
                    newState = this.MatchTokenAt_18(token, context);
                    break;
                case 19:
                    newState = this.MatchTokenAt_19(token, context);
                    break;
                case 20:
                    newState = this.MatchTokenAt_20(token, context);
                    break;
                case 21:
                    newState = this.MatchTokenAt_21(token, context);
                    break;
                case 22:
                    newState = this.MatchTokenAt_22(token, context);
                    break;
                case 23:
                    newState = this.MatchTokenAt_23(token, context);
                    break;
                case 24:
                    newState = this.MatchTokenAt_24(token, context);
                    break;
                case 25:
                    newState = this.MatchTokenAt_25(token, context);
                    break;
                case 26:
                    newState = this.MatchTokenAt_26(token, context);
                    break;
                case 27:
                    newState = this.MatchTokenAt_27(token, context);
                    break;
                case 29:
                    newState = this.MatchTokenAt_29(token, context);
                    break;
                case 30:
                    newState = this.MatchTokenAt_30(token, context);
                    break;
                case 31:
                    newState = this.MatchTokenAt_31(token, context);
                    break;
                case 32:
                    newState = this.MatchTokenAt_32(token, context);
                    break;
                case 33:
                    newState = this.MatchTokenAt_33(token, context);
                    break;
                case 34:
                    newState = this.MatchTokenAt_34(token, context);
                    break;
                default:
                    throw new InvalidOperationException("Unknown state: " + state);
            }
            return newState;
        }

        
        // Start
        int MatchTokenAt_0(Token token, ParserContext context)
        {
            if (this.Match_Language(context, token))
            {
                this.StartRule(context, RuleType.Feature_Header);
                this.Build(context, token);
                return 1;
            }
            if (this.Match_TagLine(context, token))
            {
                this.StartRule(context, RuleType.Feature_Header);
                this.StartRule(context, RuleType.Tags);
                this.Build(context, token);
                return 2;
            }
            if (this.Match_FeatureLine(context, token))
            {
                this.StartRule(context, RuleType.Feature_Header);
                this.Build(context, token);
                return 3;
            }
            if (this.Match_Comment(context, token))
            {
                this.Build(context, token);
                return 0;
            }
            if (this.Match_Empty(context, token))
            {
                this.Build(context, token);
                return 0;
            }
            
            const string stateComment = "State: 0 - Start";
            token.Detach();
            var expectedTokens = new string[] {"#Language", "#TagLine", "#FeatureLine", "#Comment", "#Empty"};
            var error = token.IsEOF ? (ParserException)new UnexpectedEOFException(token, expectedTokens, stateComment) 
                : new UnexpectedTokenException(token, expectedTokens, stateComment);
            if (this.StopAtFirstError)
                throw error;
            
            this.AddError(context, error);
            return 0;

        }
        
        
        // Feature:0>Feature_Header:0>#Language:0
        int MatchTokenAt_1(Token token, ParserContext context)
        {
            if (this.Match_TagLine(context, token))
            {
                this.StartRule(context, RuleType.Tags);
                this.Build(context, token);
                return 2;
            }
            if (this.Match_FeatureLine(context, token))
            {
                this.Build(context, token);
                return 3;
            }
            if (this.Match_Comment(context, token))
            {
                this.Build(context, token);
                return 1;
            }
            if (this.Match_Empty(context, token))
            {
                this.Build(context, token);
                return 1;
            }
            
            const string stateComment = "State: 1 - Feature:0>Feature_Header:0>#Language:0";
            token.Detach();
            var expectedTokens = new string[] {"#TagLine", "#FeatureLine", "#Comment", "#Empty"};
            var error = token.IsEOF ? (ParserException)new UnexpectedEOFException(token, expectedTokens, stateComment) 
                : new UnexpectedTokenException(token, expectedTokens, stateComment);
            if (this.StopAtFirstError)
                throw error;
            
            this.AddError(context, error);
            return 1;

        }
        
        
        // Feature:0>Feature_Header:1>Tags:0>#TagLine:0
        int MatchTokenAt_2(Token token, ParserContext context)
        {
            if (this.Match_TagLine(context, token))
            {
                this.Build(context, token);
                return 2;
            }
            if (this.Match_FeatureLine(context, token))
            {
                this.EndRule(context, RuleType.Tags);
                this.Build(context, token);
                return 3;
            }
            if (this.Match_Comment(context, token))
            {
                this.Build(context, token);
                return 2;
            }
            if (this.Match_Empty(context, token))
            {
                this.Build(context, token);
                return 2;
            }
            
            const string stateComment = "State: 2 - Feature:0>Feature_Header:1>Tags:0>#TagLine:0";
            token.Detach();
            var expectedTokens = new string[] {"#TagLine", "#FeatureLine", "#Comment", "#Empty"};
            var error = token.IsEOF ? (ParserException)new UnexpectedEOFException(token, expectedTokens, stateComment) 
                : new UnexpectedTokenException(token, expectedTokens, stateComment);
            if (this.StopAtFirstError)
                throw error;
            
            this.AddError(context, error);
            return 2;

        }
        
        
        // Feature:0>Feature_Header:2>#FeatureLine:0
        int MatchTokenAt_3(Token token, ParserContext context)
        {
            if (this.Match_EOF(context, token))
            {
                this.EndRule(context, RuleType.Feature_Header);
                this.Build(context, token);
                return 28;
            }
            if (this.Match_Empty(context, token))
            {
                this.Build(context, token);
                return 3;
            }
            if (this.Match_Comment(context, token))
            {
                this.Build(context, token);
                return 5;
            }
            if (this.Match_BackgroundLine(context, token))
            {
                this.EndRule(context, RuleType.Feature_Header);
                this.StartRule(context, RuleType.Background);
                this.Build(context, token);
                return 6;
            }
            if (this.Match_TagLine(context, token))
            {
                this.EndRule(context, RuleType.Feature_Header);
                this.StartRule(context, RuleType.Scenario_Definition);
                this.StartRule(context, RuleType.Tags);
                this.Build(context, token);
                return 11;
            }
            if (this.Match_ScenarioLine(context, token))
            {
                this.EndRule(context, RuleType.Feature_Header);
                this.StartRule(context, RuleType.Scenario_Definition);
                this.StartRule(context, RuleType.Scenario);
                this.Build(context, token);
                return 12;
            }
            if (this.Match_ScenarioOutlineLine(context, token))
            {
                this.EndRule(context, RuleType.Feature_Header);
                this.StartRule(context, RuleType.Scenario_Definition);
                this.StartRule(context, RuleType.ScenarioOutline);
                this.Build(context, token);
                return 17;
            }
            if (this.Match_Other(context, token))
            {
                this.StartRule(context, RuleType.Description);
                this.Build(context, token);
                return 4;
            }
            
            const string stateComment = "State: 3 - Feature:0>Feature_Header:2>#FeatureLine:0";
            token.Detach();
            var expectedTokens = new string[] {"#EOF", "#Empty", "#Comment", "#BackgroundLine", "#TagLine", "#ScenarioLine", "#ScenarioOutlineLine", "#Other"};
            var error = token.IsEOF ? (ParserException)new UnexpectedEOFException(token, expectedTokens, stateComment) 
                : new UnexpectedTokenException(token, expectedTokens, stateComment);
            if (this.StopAtFirstError)
                throw error;
            
            this.AddError(context, error);
            return 3;

        }
        
        
        // Feature:0>Feature_Header:3>Feature_Description:0>Description_Helper:1>Description:0>#Other:0
        int MatchTokenAt_4(Token token, ParserContext context)
        {
            if (this.Match_EOF(context, token))
            {
                this.EndRule(context, RuleType.Description);
                this.EndRule(context, RuleType.Feature_Header);
                this.Build(context, token);
                return 28;
            }
            if (this.Match_Comment(context, token))
            {
                this.EndRule(context, RuleType.Description);
                this.Build(context, token);
                return 5;
            }
            if (this.Match_BackgroundLine(context, token))
            {
                this.EndRule(context, RuleType.Description);
                this.EndRule(context, RuleType.Feature_Header);
                this.StartRule(context, RuleType.Background);
                this.Build(context, token);
                return 6;
            }
            if (this.Match_TagLine(context, token))
            {
                this.EndRule(context, RuleType.Description);
                this.EndRule(context, RuleType.Feature_Header);
                this.StartRule(context, RuleType.Scenario_Definition);
                this.StartRule(context, RuleType.Tags);
                this.Build(context, token);
                return 11;
            }
            if (this.Match_ScenarioLine(context, token))
            {
                this.EndRule(context, RuleType.Description);
                this.EndRule(context, RuleType.Feature_Header);
                this.StartRule(context, RuleType.Scenario_Definition);
                this.StartRule(context, RuleType.Scenario);
                this.Build(context, token);
                return 12;
            }
            if (this.Match_ScenarioOutlineLine(context, token))
            {
                this.EndRule(context, RuleType.Description);
                this.EndRule(context, RuleType.Feature_Header);
                this.StartRule(context, RuleType.Scenario_Definition);
                this.StartRule(context, RuleType.ScenarioOutline);
                this.Build(context, token);
                return 17;
            }
            if (this.Match_Other(context, token))
            {
                this.Build(context, token);
                return 4;
            }
            
            const string stateComment = "State: 4 - Feature:0>Feature_Header:3>Feature_Description:0>Description_Helper:1>Description:0>#Other:0";
            token.Detach();
            var expectedTokens = new string[] {"#EOF", "#Comment", "#BackgroundLine", "#TagLine", "#ScenarioLine", "#ScenarioOutlineLine", "#Other"};
            var error = token.IsEOF ? (ParserException)new UnexpectedEOFException(token, expectedTokens, stateComment) 
                : new UnexpectedTokenException(token, expectedTokens, stateComment);
            if (this.StopAtFirstError)
                throw error;
            
            this.AddError(context, error);
            return 4;

        }
        
        
        // Feature:0>Feature_Header:3>Feature_Description:0>Description_Helper:2>#Comment:0
        int MatchTokenAt_5(Token token, ParserContext context)
        {
            if (this.Match_EOF(context, token))
            {
                this.EndRule(context, RuleType.Feature_Header);
                this.Build(context, token);
                return 28;
            }
            if (this.Match_Comment(context, token))
            {
                this.Build(context, token);
                return 5;
            }
            if (this.Match_BackgroundLine(context, token))
            {
                this.EndRule(context, RuleType.Feature_Header);
                this.StartRule(context, RuleType.Background);
                this.Build(context, token);
                return 6;
            }
            if (this.Match_TagLine(context, token))
            {
                this.EndRule(context, RuleType.Feature_Header);
                this.StartRule(context, RuleType.Scenario_Definition);
                this.StartRule(context, RuleType.Tags);
                this.Build(context, token);
                return 11;
            }
            if (this.Match_ScenarioLine(context, token))
            {
                this.EndRule(context, RuleType.Feature_Header);
                this.StartRule(context, RuleType.Scenario_Definition);
                this.StartRule(context, RuleType.Scenario);
                this.Build(context, token);
                return 12;
            }
            if (this.Match_ScenarioOutlineLine(context, token))
            {
                this.EndRule(context, RuleType.Feature_Header);
                this.StartRule(context, RuleType.Scenario_Definition);
                this.StartRule(context, RuleType.ScenarioOutline);
                this.Build(context, token);
                return 17;
            }
            if (this.Match_Empty(context, token))
            {
                this.Build(context, token);
                return 5;
            }
            
            const string stateComment = "State: 5 - Feature:0>Feature_Header:3>Feature_Description:0>Description_Helper:2>#Comment:0";
            token.Detach();
            var expectedTokens = new string[] {"#EOF", "#Comment", "#BackgroundLine", "#TagLine", "#ScenarioLine", "#ScenarioOutlineLine", "#Empty"};
            var error = token.IsEOF ? (ParserException)new UnexpectedEOFException(token, expectedTokens, stateComment) 
                : new UnexpectedTokenException(token, expectedTokens, stateComment);
            if (this.StopAtFirstError)
                throw error;
            
            this.AddError(context, error);
            return 5;

        }
        
        
        // Feature:1>Background:0>#BackgroundLine:0
        int MatchTokenAt_6(Token token, ParserContext context)
        {
            if (this.Match_EOF(context, token))
            {
                this.EndRule(context, RuleType.Background);
                this.Build(context, token);
                return 28;
            }
            if (this.Match_Empty(context, token))
            {
                this.Build(context, token);
                return 6;
            }
            if (this.Match_Comment(context, token))
            {
                this.Build(context, token);
                return 8;
            }
            if (this.Match_StepLine(context, token))
            {
                this.StartRule(context, RuleType.Step);
                this.Build(context, token);
                return 9;
            }
            if (this.Match_TagLine(context, token))
            {
                this.EndRule(context, RuleType.Background);
                this.StartRule(context, RuleType.Scenario_Definition);
                this.StartRule(context, RuleType.Tags);
                this.Build(context, token);
                return 11;
            }
            if (this.Match_ScenarioLine(context, token))
            {
                this.EndRule(context, RuleType.Background);
                this.StartRule(context, RuleType.Scenario_Definition);
                this.StartRule(context, RuleType.Scenario);
                this.Build(context, token);
                return 12;
            }
            if (this.Match_ScenarioOutlineLine(context, token))
            {
                this.EndRule(context, RuleType.Background);
                this.StartRule(context, RuleType.Scenario_Definition);
                this.StartRule(context, RuleType.ScenarioOutline);
                this.Build(context, token);
                return 17;
            }
            if (this.Match_Other(context, token))
            {
                this.StartRule(context, RuleType.Description);
                this.Build(context, token);
                return 7;
            }
            
            const string stateComment = "State: 6 - Feature:1>Background:0>#BackgroundLine:0";
            token.Detach();
            var expectedTokens = new string[] {"#EOF", "#Empty", "#Comment", "#StepLine", "#TagLine", "#ScenarioLine", "#ScenarioOutlineLine", "#Other"};
            var error = token.IsEOF ? (ParserException)new UnexpectedEOFException(token, expectedTokens, stateComment) 
                : new UnexpectedTokenException(token, expectedTokens, stateComment);
            if (this.StopAtFirstError)
                throw error;
            
            this.AddError(context, error);
            return 6;

        }
        
        
        // Feature:1>Background:1>Background_Description:0>Description_Helper:1>Description:0>#Other:0
        int MatchTokenAt_7(Token token, ParserContext context)
        {
            if (this.Match_EOF(context, token))
            {
                this.EndRule(context, RuleType.Description);
                this.EndRule(context, RuleType.Background);
                this.Build(context, token);
                return 28;
            }
            if (this.Match_Comment(context, token))
            {
                this.EndRule(context, RuleType.Description);
                this.Build(context, token);
                return 8;
            }
            if (this.Match_StepLine(context, token))
            {
                this.EndRule(context, RuleType.Description);
                this.StartRule(context, RuleType.Step);
                this.Build(context, token);
                return 9;
            }
            if (this.Match_TagLine(context, token))
            {
                this.EndRule(context, RuleType.Description);
                this.EndRule(context, RuleType.Background);
                this.StartRule(context, RuleType.Scenario_Definition);
                this.StartRule(context, RuleType.Tags);
                this.Build(context, token);
                return 11;
            }
            if (this.Match_ScenarioLine(context, token))
            {
                this.EndRule(context, RuleType.Description);
                this.EndRule(context, RuleType.Background);
                this.StartRule(context, RuleType.Scenario_Definition);
                this.StartRule(context, RuleType.Scenario);
                this.Build(context, token);
                return 12;
            }
            if (this.Match_ScenarioOutlineLine(context, token))
            {
                this.EndRule(context, RuleType.Description);
                this.EndRule(context, RuleType.Background);
                this.StartRule(context, RuleType.Scenario_Definition);
                this.StartRule(context, RuleType.ScenarioOutline);
                this.Build(context, token);
                return 17;
            }
            if (this.Match_Other(context, token))
            {
                this.Build(context, token);
                return 7;
            }
            
            const string stateComment = "State: 7 - Feature:1>Background:1>Background_Description:0>Description_Helper:1>Description:0>#Other:0";
            token.Detach();
            var expectedTokens = new string[] {"#EOF", "#Comment", "#StepLine", "#TagLine", "#ScenarioLine", "#ScenarioOutlineLine", "#Other"};
            var error = token.IsEOF ? (ParserException)new UnexpectedEOFException(token, expectedTokens, stateComment) 
                : new UnexpectedTokenException(token, expectedTokens, stateComment);
            if (this.StopAtFirstError)
                throw error;
            
            this.AddError(context, error);
            return 7;

        }
        
        
        // Feature:1>Background:1>Background_Description:0>Description_Helper:2>#Comment:0
        int MatchTokenAt_8(Token token, ParserContext context)
        {
            if (this.Match_EOF(context, token))
            {
                this.EndRule(context, RuleType.Background);
                this.Build(context, token);
                return 28;
            }
            if (this.Match_Comment(context, token))
            {
                this.Build(context, token);
                return 8;
            }
            if (this.Match_StepLine(context, token))
            {
                this.StartRule(context, RuleType.Step);
                this.Build(context, token);
                return 9;
            }
            if (this.Match_TagLine(context, token))
            {
                this.EndRule(context, RuleType.Background);
                this.StartRule(context, RuleType.Scenario_Definition);
                this.StartRule(context, RuleType.Tags);
                this.Build(context, token);
                return 11;
            }
            if (this.Match_ScenarioLine(context, token))
            {
                this.EndRule(context, RuleType.Background);
                this.StartRule(context, RuleType.Scenario_Definition);
                this.StartRule(context, RuleType.Scenario);
                this.Build(context, token);
                return 12;
            }
            if (this.Match_ScenarioOutlineLine(context, token))
            {
                this.EndRule(context, RuleType.Background);
                this.StartRule(context, RuleType.Scenario_Definition);
                this.StartRule(context, RuleType.ScenarioOutline);
                this.Build(context, token);
                return 17;
            }
            if (this.Match_Empty(context, token))
            {
                this.Build(context, token);
                return 8;
            }
            
            const string stateComment = "State: 8 - Feature:1>Background:1>Background_Description:0>Description_Helper:2>#Comment:0";
            token.Detach();
            var expectedTokens = new string[] {"#EOF", "#Comment", "#StepLine", "#TagLine", "#ScenarioLine", "#ScenarioOutlineLine", "#Empty"};
            var error = token.IsEOF ? (ParserException)new UnexpectedEOFException(token, expectedTokens, stateComment) 
                : new UnexpectedTokenException(token, expectedTokens, stateComment);
            if (this.StopAtFirstError)
                throw error;
            
            this.AddError(context, error);
            return 8;

        }
        
        
        // Feature:1>Background:2>Scenario_Step:0>Step:0>#StepLine:0
        int MatchTokenAt_9(Token token, ParserContext context)
        {
            if (this.Match_EOF(context, token))
            {
                this.EndRule(context, RuleType.Step);
                this.EndRule(context, RuleType.Background);
                this.Build(context, token);
                return 28;
            }
            if (this.Match_TableRow(context, token))
            {
                this.StartRule(context, RuleType.DataTable);
                this.Build(context, token);
                return 10;
            }
            if (this.Match_DocStringSeparator(context, token))
            {
                this.StartRule(context, RuleType.DocString);
                this.Build(context, token);
                return 33;
            }
            if (this.Match_StepLine(context, token))
            {
                this.EndRule(context, RuleType.Step);
                this.StartRule(context, RuleType.Step);
                this.Build(context, token);
                return 9;
            }
            if (this.Match_TagLine(context, token))
            {
                this.EndRule(context, RuleType.Step);
                this.EndRule(context, RuleType.Background);
                this.StartRule(context, RuleType.Scenario_Definition);
                this.StartRule(context, RuleType.Tags);
                this.Build(context, token);
                return 11;
            }
            if (this.Match_ScenarioLine(context, token))
            {
                this.EndRule(context, RuleType.Step);
                this.EndRule(context, RuleType.Background);
                this.StartRule(context, RuleType.Scenario_Definition);
                this.StartRule(context, RuleType.Scenario);
                this.Build(context, token);
                return 12;
            }
            if (this.Match_ScenarioOutlineLine(context, token))
            {
                this.EndRule(context, RuleType.Step);
                this.EndRule(context, RuleType.Background);
                this.StartRule(context, RuleType.Scenario_Definition);
                this.StartRule(context, RuleType.ScenarioOutline);
                this.Build(context, token);
                return 17;
            }
            if (this.Match_Comment(context, token))
            {
                this.Build(context, token);
                return 9;
            }
            if (this.Match_Empty(context, token))
            {
                this.Build(context, token);
                return 9;
            }
            
            const string stateComment = "State: 9 - Feature:1>Background:2>Scenario_Step:0>Step:0>#StepLine:0";
            token.Detach();
            var expectedTokens = new string[] {"#EOF", "#TableRow", "#DocStringSeparator", "#StepLine", "#TagLine", "#ScenarioLine", "#ScenarioOutlineLine", "#Comment", "#Empty"};
            var error = token.IsEOF ? (ParserException)new UnexpectedEOFException(token, expectedTokens, stateComment) 
                : new UnexpectedTokenException(token, expectedTokens, stateComment);
            if (this.StopAtFirstError)
                throw error;
            
            this.AddError(context, error);
            return 9;

        }
        
        
        // Feature:1>Background:2>Scenario_Step:0>Step:1>Step_Arg:0>__alt1:0>DataTable:0>#TableRow:0
        int MatchTokenAt_10(Token token, ParserContext context)
        {
            if (this.Match_EOF(context, token))
            {
                this.EndRule(context, RuleType.DataTable);
                this.EndRule(context, RuleType.Step);
                this.EndRule(context, RuleType.Background);
                this.Build(context, token);
                return 28;
            }
            if (this.Match_TableRow(context, token))
            {
                this.Build(context, token);
                return 10;
            }
            if (this.Match_StepLine(context, token))
            {
                this.EndRule(context, RuleType.DataTable);
                this.EndRule(context, RuleType.Step);
                this.StartRule(context, RuleType.Step);
                this.Build(context, token);
                return 9;
            }
            if (this.Match_TagLine(context, token))
            {
                this.EndRule(context, RuleType.DataTable);
                this.EndRule(context, RuleType.Step);
                this.EndRule(context, RuleType.Background);
                this.StartRule(context, RuleType.Scenario_Definition);
                this.StartRule(context, RuleType.Tags);
                this.Build(context, token);
                return 11;
            }
            if (this.Match_ScenarioLine(context, token))
            {
                this.EndRule(context, RuleType.DataTable);
                this.EndRule(context, RuleType.Step);
                this.EndRule(context, RuleType.Background);
                this.StartRule(context, RuleType.Scenario_Definition);
                this.StartRule(context, RuleType.Scenario);
                this.Build(context, token);
                return 12;
            }
            if (this.Match_ScenarioOutlineLine(context, token))
            {
                this.EndRule(context, RuleType.DataTable);
                this.EndRule(context, RuleType.Step);
                this.EndRule(context, RuleType.Background);
                this.StartRule(context, RuleType.Scenario_Definition);
                this.StartRule(context, RuleType.ScenarioOutline);
                this.Build(context, token);
                return 17;
            }
            if (this.Match_Comment(context, token))
            {
                this.Build(context, token);
                return 10;
            }
            if (this.Match_Empty(context, token))
            {
                this.Build(context, token);
                return 10;
            }
            
            const string stateComment = "State: 10 - Feature:1>Background:2>Scenario_Step:0>Step:1>Step_Arg:0>__alt1:0>DataTable:0>#TableRow:0";
            token.Detach();
            var expectedTokens = new string[] {"#EOF", "#TableRow", "#StepLine", "#TagLine", "#ScenarioLine", "#ScenarioOutlineLine", "#Comment", "#Empty"};
            var error = token.IsEOF ? (ParserException)new UnexpectedEOFException(token, expectedTokens, stateComment) 
                : new UnexpectedTokenException(token, expectedTokens, stateComment);
            if (this.StopAtFirstError)
                throw error;
            
            this.AddError(context, error);
            return 10;

        }
        
        
        // Feature:2>Scenario_Definition:0>Tags:0>#TagLine:0
        int MatchTokenAt_11(Token token, ParserContext context)
        {
            if (this.Match_TagLine(context, token))
            {
                this.Build(context, token);
                return 11;
            }
            if (this.Match_ScenarioLine(context, token))
            {
                this.EndRule(context, RuleType.Tags);
                this.StartRule(context, RuleType.Scenario);
                this.Build(context, token);
                return 12;
            }
            if (this.Match_ScenarioOutlineLine(context, token))
            {
                this.EndRule(context, RuleType.Tags);
                this.StartRule(context, RuleType.ScenarioOutline);
                this.Build(context, token);
                return 17;
            }
            if (this.Match_Comment(context, token))
            {
                this.Build(context, token);
                return 11;
            }
            if (this.Match_Empty(context, token))
            {
                this.Build(context, token);
                return 11;
            }
            
            const string stateComment = "State: 11 - Feature:2>Scenario_Definition:0>Tags:0>#TagLine:0";
            token.Detach();
            var expectedTokens = new string[] {"#TagLine", "#ScenarioLine", "#ScenarioOutlineLine", "#Comment", "#Empty"};
            var error = token.IsEOF ? (ParserException)new UnexpectedEOFException(token, expectedTokens, stateComment) 
                : new UnexpectedTokenException(token, expectedTokens, stateComment);
            if (this.StopAtFirstError)
                throw error;
            
            this.AddError(context, error);
            return 11;

        }
        
        
        // Feature:2>Scenario_Definition:1>__alt0:0>Scenario:0>#ScenarioLine:0
        int MatchTokenAt_12(Token token, ParserContext context)
        {
            if (this.Match_EOF(context, token))
            {
                this.EndRule(context, RuleType.Scenario);
                this.EndRule(context, RuleType.Scenario_Definition);
                this.Build(context, token);
                return 28;
            }
            if (this.Match_Empty(context, token))
            {
                this.Build(context, token);
                return 12;
            }
            if (this.Match_Comment(context, token))
            {
                this.Build(context, token);
                return 14;
            }
            if (this.Match_StepLine(context, token))
            {
                this.StartRule(context, RuleType.Step);
                this.Build(context, token);
                return 15;
            }
            if (this.Match_TagLine(context, token))
            {
                this.EndRule(context, RuleType.Scenario);
                this.EndRule(context, RuleType.Scenario_Definition);
                this.StartRule(context, RuleType.Scenario_Definition);
                this.StartRule(context, RuleType.Tags);
                this.Build(context, token);
                return 11;
            }
            if (this.Match_ScenarioLine(context, token))
            {
                this.EndRule(context, RuleType.Scenario);
                this.EndRule(context, RuleType.Scenario_Definition);
                this.StartRule(context, RuleType.Scenario_Definition);
                this.StartRule(context, RuleType.Scenario);
                this.Build(context, token);
                return 12;
            }
            if (this.Match_ScenarioOutlineLine(context, token))
            {
                this.EndRule(context, RuleType.Scenario);
                this.EndRule(context, RuleType.Scenario_Definition);
                this.StartRule(context, RuleType.Scenario_Definition);
                this.StartRule(context, RuleType.ScenarioOutline);
                this.Build(context, token);
                return 17;
            }
            if (this.Match_Other(context, token))
            {
                this.StartRule(context, RuleType.Description);
                this.Build(context, token);
                return 13;
            }
            
            const string stateComment = "State: 12 - Feature:2>Scenario_Definition:1>__alt0:0>Scenario:0>#ScenarioLine:0";
            token.Detach();
            var expectedTokens = new string[] {"#EOF", "#Empty", "#Comment", "#StepLine", "#TagLine", "#ScenarioLine", "#ScenarioOutlineLine", "#Other"};
            var error = token.IsEOF ? (ParserException)new UnexpectedEOFException(token, expectedTokens, stateComment) 
                : new UnexpectedTokenException(token, expectedTokens, stateComment);
            if (this.StopAtFirstError)
                throw error;
            
            this.AddError(context, error);
            return 12;

        }
        
        
        // Feature:2>Scenario_Definition:1>__alt0:0>Scenario:1>Scenario_Description:0>Description_Helper:1>Description:0>#Other:0
        int MatchTokenAt_13(Token token, ParserContext context)
        {
            if (this.Match_EOF(context, token))
            {
                this.EndRule(context, RuleType.Description);
                this.EndRule(context, RuleType.Scenario);
                this.EndRule(context, RuleType.Scenario_Definition);
                this.Build(context, token);
                return 28;
            }
            if (this.Match_Comment(context, token))
            {
                this.EndRule(context, RuleType.Description);
                this.Build(context, token);
                return 14;
            }
            if (this.Match_StepLine(context, token))
            {
                this.EndRule(context, RuleType.Description);
                this.StartRule(context, RuleType.Step);
                this.Build(context, token);
                return 15;
            }
            if (this.Match_TagLine(context, token))
            {
                this.EndRule(context, RuleType.Description);
                this.EndRule(context, RuleType.Scenario);
                this.EndRule(context, RuleType.Scenario_Definition);
                this.StartRule(context, RuleType.Scenario_Definition);
                this.StartRule(context, RuleType.Tags);
                this.Build(context, token);
                return 11;
            }
            if (this.Match_ScenarioLine(context, token))
            {
                this.EndRule(context, RuleType.Description);
                this.EndRule(context, RuleType.Scenario);
                this.EndRule(context, RuleType.Scenario_Definition);
                this.StartRule(context, RuleType.Scenario_Definition);
                this.StartRule(context, RuleType.Scenario);
                this.Build(context, token);
                return 12;
            }
            if (this.Match_ScenarioOutlineLine(context, token))
            {
                this.EndRule(context, RuleType.Description);
                this.EndRule(context, RuleType.Scenario);
                this.EndRule(context, RuleType.Scenario_Definition);
                this.StartRule(context, RuleType.Scenario_Definition);
                this.StartRule(context, RuleType.ScenarioOutline);
                this.Build(context, token);
                return 17;
            }
            if (this.Match_Other(context, token))
            {
                this.Build(context, token);
                return 13;
            }
            
            const string stateComment = "State: 13 - Feature:2>Scenario_Definition:1>__alt0:0>Scenario:1>Scenario_Description:0>Description_Helper:1>Description:0>#Other:0";
            token.Detach();
            var expectedTokens = new string[] {"#EOF", "#Comment", "#StepLine", "#TagLine", "#ScenarioLine", "#ScenarioOutlineLine", "#Other"};
            var error = token.IsEOF ? (ParserException)new UnexpectedEOFException(token, expectedTokens, stateComment) 
                : new UnexpectedTokenException(token, expectedTokens, stateComment);
            if (this.StopAtFirstError)
                throw error;
            
            this.AddError(context, error);
            return 13;

        }
        
        
        // Feature:2>Scenario_Definition:1>__alt0:0>Scenario:1>Scenario_Description:0>Description_Helper:2>#Comment:0
        int MatchTokenAt_14(Token token, ParserContext context)
        {
            if (this.Match_EOF(context, token))
            {
                this.EndRule(context, RuleType.Scenario);
                this.EndRule(context, RuleType.Scenario_Definition);
                this.Build(context, token);
                return 28;
            }
            if (this.Match_Comment(context, token))
            {
                this.Build(context, token);
                return 14;
            }
            if (this.Match_StepLine(context, token))
            {
                this.StartRule(context, RuleType.Step);
                this.Build(context, token);
                return 15;
            }
            if (this.Match_TagLine(context, token))
            {
                this.EndRule(context, RuleType.Scenario);
                this.EndRule(context, RuleType.Scenario_Definition);
                this.StartRule(context, RuleType.Scenario_Definition);
                this.StartRule(context, RuleType.Tags);
                this.Build(context, token);
                return 11;
            }
            if (this.Match_ScenarioLine(context, token))
            {
                this.EndRule(context, RuleType.Scenario);
                this.EndRule(context, RuleType.Scenario_Definition);
                this.StartRule(context, RuleType.Scenario_Definition);
                this.StartRule(context, RuleType.Scenario);
                this.Build(context, token);
                return 12;
            }
            if (this.Match_ScenarioOutlineLine(context, token))
            {
                this.EndRule(context, RuleType.Scenario);
                this.EndRule(context, RuleType.Scenario_Definition);
                this.StartRule(context, RuleType.Scenario_Definition);
                this.StartRule(context, RuleType.ScenarioOutline);
                this.Build(context, token);
                return 17;
            }
            if (this.Match_Empty(context, token))
            {
                this.Build(context, token);
                return 14;
            }
            
            const string stateComment = "State: 14 - Feature:2>Scenario_Definition:1>__alt0:0>Scenario:1>Scenario_Description:0>Description_Helper:2>#Comment:0";
            token.Detach();
            var expectedTokens = new string[] {"#EOF", "#Comment", "#StepLine", "#TagLine", "#ScenarioLine", "#ScenarioOutlineLine", "#Empty"};
            var error = token.IsEOF ? (ParserException)new UnexpectedEOFException(token, expectedTokens, stateComment) 
                : new UnexpectedTokenException(token, expectedTokens, stateComment);
            if (this.StopAtFirstError)
                throw error;
            
            this.AddError(context, error);
            return 14;

        }
        
        
        // Feature:2>Scenario_Definition:1>__alt0:0>Scenario:2>Scenario_Step:0>Step:0>#StepLine:0
        int MatchTokenAt_15(Token token, ParserContext context)
        {
            if (this.Match_EOF(context, token))
            {
                this.EndRule(context, RuleType.Step);
                this.EndRule(context, RuleType.Scenario);
                this.EndRule(context, RuleType.Scenario_Definition);
                this.Build(context, token);
                return 28;
            }
            if (this.Match_TableRow(context, token))
            {
                this.StartRule(context, RuleType.DataTable);
                this.Build(context, token);
                return 16;
            }
            if (this.Match_DocStringSeparator(context, token))
            {
                this.StartRule(context, RuleType.DocString);
                this.Build(context, token);
                return 31;
            }
            if (this.Match_StepLine(context, token))
            {
                this.EndRule(context, RuleType.Step);
                this.StartRule(context, RuleType.Step);
                this.Build(context, token);
                return 15;
            }
            if (this.Match_TagLine(context, token))
            {
                this.EndRule(context, RuleType.Step);
                this.EndRule(context, RuleType.Scenario);
                this.EndRule(context, RuleType.Scenario_Definition);
                this.StartRule(context, RuleType.Scenario_Definition);
                this.StartRule(context, RuleType.Tags);
                this.Build(context, token);
                return 11;
            }
            if (this.Match_ScenarioLine(context, token))
            {
                this.EndRule(context, RuleType.Step);
                this.EndRule(context, RuleType.Scenario);
                this.EndRule(context, RuleType.Scenario_Definition);
                this.StartRule(context, RuleType.Scenario_Definition);
                this.StartRule(context, RuleType.Scenario);
                this.Build(context, token);
                return 12;
            }
            if (this.Match_ScenarioOutlineLine(context, token))
            {
                this.EndRule(context, RuleType.Step);
                this.EndRule(context, RuleType.Scenario);
                this.EndRule(context, RuleType.Scenario_Definition);
                this.StartRule(context, RuleType.Scenario_Definition);
                this.StartRule(context, RuleType.ScenarioOutline);
                this.Build(context, token);
                return 17;
            }
            if (this.Match_Comment(context, token))
            {
                this.Build(context, token);
                return 15;
            }
            if (this.Match_Empty(context, token))
            {
                this.Build(context, token);
                return 15;
            }
            
            const string stateComment = "State: 15 - Feature:2>Scenario_Definition:1>__alt0:0>Scenario:2>Scenario_Step:0>Step:0>#StepLine:0";
            token.Detach();
            var expectedTokens = new string[] {"#EOF", "#TableRow", "#DocStringSeparator", "#StepLine", "#TagLine", "#ScenarioLine", "#ScenarioOutlineLine", "#Comment", "#Empty"};
            var error = token.IsEOF ? (ParserException)new UnexpectedEOFException(token, expectedTokens, stateComment) 
                : new UnexpectedTokenException(token, expectedTokens, stateComment);
            if (this.StopAtFirstError)
                throw error;
            
            this.AddError(context, error);
            return 15;

        }
        
        
        // Feature:2>Scenario_Definition:1>__alt0:0>Scenario:2>Scenario_Step:0>Step:1>Step_Arg:0>__alt1:0>DataTable:0>#TableRow:0
        int MatchTokenAt_16(Token token, ParserContext context)
        {
            if (this.Match_EOF(context, token))
            {
                this.EndRule(context, RuleType.DataTable);
                this.EndRule(context, RuleType.Step);
                this.EndRule(context, RuleType.Scenario);
                this.EndRule(context, RuleType.Scenario_Definition);
                this.Build(context, token);
                return 28;
            }
            if (this.Match_TableRow(context, token))
            {
                this.Build(context, token);
                return 16;
            }
            if (this.Match_StepLine(context, token))
            {
                this.EndRule(context, RuleType.DataTable);
                this.EndRule(context, RuleType.Step);
                this.StartRule(context, RuleType.Step);
                this.Build(context, token);
                return 15;
            }
            if (this.Match_TagLine(context, token))
            {
                this.EndRule(context, RuleType.DataTable);
                this.EndRule(context, RuleType.Step);
                this.EndRule(context, RuleType.Scenario);
                this.EndRule(context, RuleType.Scenario_Definition);
                this.StartRule(context, RuleType.Scenario_Definition);
                this.StartRule(context, RuleType.Tags);
                this.Build(context, token);
                return 11;
            }
            if (this.Match_ScenarioLine(context, token))
            {
                this.EndRule(context, RuleType.DataTable);
                this.EndRule(context, RuleType.Step);
                this.EndRule(context, RuleType.Scenario);
                this.EndRule(context, RuleType.Scenario_Definition);
                this.StartRule(context, RuleType.Scenario_Definition);
                this.StartRule(context, RuleType.Scenario);
                this.Build(context, token);
                return 12;
            }
            if (this.Match_ScenarioOutlineLine(context, token))
            {
                this.EndRule(context, RuleType.DataTable);
                this.EndRule(context, RuleType.Step);
                this.EndRule(context, RuleType.Scenario);
                this.EndRule(context, RuleType.Scenario_Definition);
                this.StartRule(context, RuleType.Scenario_Definition);
                this.StartRule(context, RuleType.ScenarioOutline);
                this.Build(context, token);
                return 17;
            }
            if (this.Match_Comment(context, token))
            {
                this.Build(context, token);
                return 16;
            }
            if (this.Match_Empty(context, token))
            {
                this.Build(context, token);
                return 16;
            }
            
            const string stateComment = "State: 16 - Feature:2>Scenario_Definition:1>__alt0:0>Scenario:2>Scenario_Step:0>Step:1>Step_Arg:0>__alt1:0>DataTable:0>#TableRow:0";
            token.Detach();
            var expectedTokens = new string[] {"#EOF", "#TableRow", "#StepLine", "#TagLine", "#ScenarioLine", "#ScenarioOutlineLine", "#Comment", "#Empty"};
            var error = token.IsEOF ? (ParserException)new UnexpectedEOFException(token, expectedTokens, stateComment) 
                : new UnexpectedTokenException(token, expectedTokens, stateComment);
            if (this.StopAtFirstError)
                throw error;
            
            this.AddError(context, error);
            return 16;

        }
        
        
        // Feature:2>Scenario_Definition:1>__alt0:1>ScenarioOutline:0>#ScenarioOutlineLine:0
        int MatchTokenAt_17(Token token, ParserContext context)
        {
            if (this.Match_Empty(context, token))
            {
                this.Build(context, token);
                return 17;
            }
            if (this.Match_Comment(context, token))
            {
                this.Build(context, token);
                return 19;
            }
            if (this.Match_StepLine(context, token))
            {
                this.StartRule(context, RuleType.Step);
                this.Build(context, token);
                return 20;
            }
            if (this.Match_TagLine(context, token))
            {
                this.StartRule(context, RuleType.Examples_Definition);
                this.StartRule(context, RuleType.Tags);
                this.Build(context, token);
                return 22;
            }
            if (this.Match_ExamplesLine(context, token))
            {
                this.StartRule(context, RuleType.Examples_Definition);
                this.StartRule(context, RuleType.Examples);
                this.Build(context, token);
                return 23;
            }
            if (this.Match_Other(context, token))
            {
                this.StartRule(context, RuleType.Description);
                this.Build(context, token);
                return 18;
            }
            
            const string stateComment = "State: 17 - Feature:2>Scenario_Definition:1>__alt0:1>ScenarioOutline:0>#ScenarioOutlineLine:0";
            token.Detach();
            var expectedTokens = new string[] {"#Empty", "#Comment", "#StepLine", "#TagLine", "#ExamplesLine", "#Other"};
            var error = token.IsEOF ? (ParserException)new UnexpectedEOFException(token, expectedTokens, stateComment) 
                : new UnexpectedTokenException(token, expectedTokens, stateComment);
            if (this.StopAtFirstError)
                throw error;
            
            this.AddError(context, error);
            return 17;

        }
        
        
        // Feature:2>Scenario_Definition:1>__alt0:1>ScenarioOutline:1>ScenarioOutline_Description:0>Description_Helper:1>Description:0>#Other:0
        int MatchTokenAt_18(Token token, ParserContext context)
        {
            if (this.Match_Comment(context, token))
            {
                this.EndRule(context, RuleType.Description);
                this.Build(context, token);
                return 19;
            }
            if (this.Match_StepLine(context, token))
            {
                this.EndRule(context, RuleType.Description);
                this.StartRule(context, RuleType.Step);
                this.Build(context, token);
                return 20;
            }
            if (this.Match_TagLine(context, token))
            {
                this.EndRule(context, RuleType.Description);
                this.StartRule(context, RuleType.Examples_Definition);
                this.StartRule(context, RuleType.Tags);
                this.Build(context, token);
                return 22;
            }
            if (this.Match_ExamplesLine(context, token))
            {
                this.EndRule(context, RuleType.Description);
                this.StartRule(context, RuleType.Examples_Definition);
                this.StartRule(context, RuleType.Examples);
                this.Build(context, token);
                return 23;
            }
            if (this.Match_Other(context, token))
            {
                this.Build(context, token);
                return 18;
            }
            
            const string stateComment = "State: 18 - Feature:2>Scenario_Definition:1>__alt0:1>ScenarioOutline:1>ScenarioOutline_Description:0>Description_Helper:1>Description:0>#Other:0";
            token.Detach();
            var expectedTokens = new string[] {"#Comment", "#StepLine", "#TagLine", "#ExamplesLine", "#Other"};
            var error = token.IsEOF ? (ParserException)new UnexpectedEOFException(token, expectedTokens, stateComment) 
                : new UnexpectedTokenException(token, expectedTokens, stateComment);
            if (this.StopAtFirstError)
                throw error;
            
            this.AddError(context, error);
            return 18;

        }
        
        
        // Feature:2>Scenario_Definition:1>__alt0:1>ScenarioOutline:1>ScenarioOutline_Description:0>Description_Helper:2>#Comment:0
        int MatchTokenAt_19(Token token, ParserContext context)
        {
            if (this.Match_Comment(context, token))
            {
                this.Build(context, token);
                return 19;
            }
            if (this.Match_StepLine(context, token))
            {
                this.StartRule(context, RuleType.Step);
                this.Build(context, token);
                return 20;
            }
            if (this.Match_TagLine(context, token))
            {
                this.StartRule(context, RuleType.Examples_Definition);
                this.StartRule(context, RuleType.Tags);
                this.Build(context, token);
                return 22;
            }
            if (this.Match_ExamplesLine(context, token))
            {
                this.StartRule(context, RuleType.Examples_Definition);
                this.StartRule(context, RuleType.Examples);
                this.Build(context, token);
                return 23;
            }
            if (this.Match_Empty(context, token))
            {
                this.Build(context, token);
                return 19;
            }
            
            const string stateComment = "State: 19 - Feature:2>Scenario_Definition:1>__alt0:1>ScenarioOutline:1>ScenarioOutline_Description:0>Description_Helper:2>#Comment:0";
            token.Detach();
            var expectedTokens = new string[] {"#Comment", "#StepLine", "#TagLine", "#ExamplesLine", "#Empty"};
            var error = token.IsEOF ? (ParserException)new UnexpectedEOFException(token, expectedTokens, stateComment) 
                : new UnexpectedTokenException(token, expectedTokens, stateComment);
            if (this.StopAtFirstError)
                throw error;
            
            this.AddError(context, error);
            return 19;

        }
        
        
        // Feature:2>Scenario_Definition:1>__alt0:1>ScenarioOutline:2>ScenarioOutline_Step:0>Step:0>#StepLine:0
        int MatchTokenAt_20(Token token, ParserContext context)
        {
            if (this.Match_TableRow(context, token))
            {
                this.StartRule(context, RuleType.DataTable);
                this.Build(context, token);
                return 21;
            }
            if (this.Match_DocStringSeparator(context, token))
            {
                this.StartRule(context, RuleType.DocString);
                this.Build(context, token);
                return 29;
            }
            if (this.Match_StepLine(context, token))
            {
                this.EndRule(context, RuleType.Step);
                this.StartRule(context, RuleType.Step);
                this.Build(context, token);
                return 20;
            }
            if (this.Match_TagLine(context, token))
            {
                this.EndRule(context, RuleType.Step);
                this.StartRule(context, RuleType.Examples_Definition);
                this.StartRule(context, RuleType.Tags);
                this.Build(context, token);
                return 22;
            }
            if (this.Match_ExamplesLine(context, token))
            {
                this.EndRule(context, RuleType.Step);
                this.StartRule(context, RuleType.Examples_Definition);
                this.StartRule(context, RuleType.Examples);
                this.Build(context, token);
                return 23;
            }
            if (this.Match_Comment(context, token))
            {
                this.Build(context, token);
                return 20;
            }
            if (this.Match_Empty(context, token))
            {
                this.Build(context, token);
                return 20;
            }
            
            const string stateComment = "State: 20 - Feature:2>Scenario_Definition:1>__alt0:1>ScenarioOutline:2>ScenarioOutline_Step:0>Step:0>#StepLine:0";
            token.Detach();
            var expectedTokens = new string[] {"#TableRow", "#DocStringSeparator", "#StepLine", "#TagLine", "#ExamplesLine", "#Comment", "#Empty"};
            var error = token.IsEOF ? (ParserException)new UnexpectedEOFException(token, expectedTokens, stateComment) 
                : new UnexpectedTokenException(token, expectedTokens, stateComment);
            if (this.StopAtFirstError)
                throw error;
            
            this.AddError(context, error);
            return 20;

        }
        
        
        // Feature:2>Scenario_Definition:1>__alt0:1>ScenarioOutline:2>ScenarioOutline_Step:0>Step:1>Step_Arg:0>__alt1:0>DataTable:0>#TableRow:0
        int MatchTokenAt_21(Token token, ParserContext context)
        {
            if (this.Match_TableRow(context, token))
            {
                this.Build(context, token);
                return 21;
            }
            if (this.Match_StepLine(context, token))
            {
                this.EndRule(context, RuleType.DataTable);
                this.EndRule(context, RuleType.Step);
                this.StartRule(context, RuleType.Step);
                this.Build(context, token);
                return 20;
            }
            if (this.Match_TagLine(context, token))
            {
                this.EndRule(context, RuleType.DataTable);
                this.EndRule(context, RuleType.Step);
                this.StartRule(context, RuleType.Examples_Definition);
                this.StartRule(context, RuleType.Tags);
                this.Build(context, token);
                return 22;
            }
            if (this.Match_ExamplesLine(context, token))
            {
                this.EndRule(context, RuleType.DataTable);
                this.EndRule(context, RuleType.Step);
                this.StartRule(context, RuleType.Examples_Definition);
                this.StartRule(context, RuleType.Examples);
                this.Build(context, token);
                return 23;
            }
            if (this.Match_Comment(context, token))
            {
                this.Build(context, token);
                return 21;
            }
            if (this.Match_Empty(context, token))
            {
                this.Build(context, token);
                return 21;
            }
            
            const string stateComment = "State: 21 - Feature:2>Scenario_Definition:1>__alt0:1>ScenarioOutline:2>ScenarioOutline_Step:0>Step:1>Step_Arg:0>__alt1:0>DataTable:0>#TableRow:0";
            token.Detach();
            var expectedTokens = new string[] {"#TableRow", "#StepLine", "#TagLine", "#ExamplesLine", "#Comment", "#Empty"};
            var error = token.IsEOF ? (ParserException)new UnexpectedEOFException(token, expectedTokens, stateComment) 
                : new UnexpectedTokenException(token, expectedTokens, stateComment);
            if (this.StopAtFirstError)
                throw error;
            
            this.AddError(context, error);
            return 21;

        }
        
        
        // Feature:2>Scenario_Definition:1>__alt0:1>ScenarioOutline:3>Examples_Definition:0>Tags:0>#TagLine:0
        int MatchTokenAt_22(Token token, ParserContext context)
        {
            if (this.Match_TagLine(context, token))
            {
                this.Build(context, token);
                return 22;
            }
            if (this.Match_ExamplesLine(context, token))
            {
                this.EndRule(context, RuleType.Tags);
                this.StartRule(context, RuleType.Examples);
                this.Build(context, token);
                return 23;
            }
            if (this.Match_Comment(context, token))
            {
                this.Build(context, token);
                return 22;
            }
            if (this.Match_Empty(context, token))
            {
                this.Build(context, token);
                return 22;
            }
            
            const string stateComment = "State: 22 - Feature:2>Scenario_Definition:1>__alt0:1>ScenarioOutline:3>Examples_Definition:0>Tags:0>#TagLine:0";
            token.Detach();
            var expectedTokens = new string[] {"#TagLine", "#ExamplesLine", "#Comment", "#Empty"};
            var error = token.IsEOF ? (ParserException)new UnexpectedEOFException(token, expectedTokens, stateComment) 
                : new UnexpectedTokenException(token, expectedTokens, stateComment);
            if (this.StopAtFirstError)
                throw error;
            
            this.AddError(context, error);
            return 22;

        }
        
        
        // Feature:2>Scenario_Definition:1>__alt0:1>ScenarioOutline:3>Examples_Definition:1>Examples:0>#ExamplesLine:0
        int MatchTokenAt_23(Token token, ParserContext context)
        {
            if (this.Match_Empty(context, token))
            {
                this.Build(context, token);
                return 23;
            }
            if (this.Match_Comment(context, token))
            {
                this.Build(context, token);
                return 25;
            }
            if (this.Match_TableRow(context, token))
            {
                this.Build(context, token);
                return 26;
            }
            if (this.Match_Other(context, token))
            {
                this.StartRule(context, RuleType.Description);
                this.Build(context, token);
                return 24;
            }
            
            const string stateComment = "State: 23 - Feature:2>Scenario_Definition:1>__alt0:1>ScenarioOutline:3>Examples_Definition:1>Examples:0>#ExamplesLine:0";
            token.Detach();
            var expectedTokens = new string[] {"#Empty", "#Comment", "#TableRow", "#Other"};
            var error = token.IsEOF ? (ParserException)new UnexpectedEOFException(token, expectedTokens, stateComment) 
                : new UnexpectedTokenException(token, expectedTokens, stateComment);
            if (this.StopAtFirstError)
                throw error;
            
            this.AddError(context, error);
            return 23;

        }
        
        
        // Feature:2>Scenario_Definition:1>__alt0:1>ScenarioOutline:3>Examples_Definition:1>Examples:1>Examples_Description:0>Description_Helper:1>Description:0>#Other:0
        int MatchTokenAt_24(Token token, ParserContext context)
        {
            if (this.Match_Comment(context, token))
            {
                this.EndRule(context, RuleType.Description);
                this.Build(context, token);
                return 25;
            }
            if (this.Match_TableRow(context, token))
            {
                this.EndRule(context, RuleType.Description);
                this.Build(context, token);
                return 26;
            }
            if (this.Match_Other(context, token))
            {
                this.Build(context, token);
                return 24;
            }
            
            const string stateComment = "State: 24 - Feature:2>Scenario_Definition:1>__alt0:1>ScenarioOutline:3>Examples_Definition:1>Examples:1>Examples_Description:0>Description_Helper:1>Description:0>#Other:0";
            token.Detach();
            var expectedTokens = new string[] {"#Comment", "#TableRow", "#Other"};
            var error = token.IsEOF ? (ParserException)new UnexpectedEOFException(token, expectedTokens, stateComment) 
                : new UnexpectedTokenException(token, expectedTokens, stateComment);
            if (this.StopAtFirstError)
                throw error;
            
            this.AddError(context, error);
            return 24;

        }
        
        
        // Feature:2>Scenario_Definition:1>__alt0:1>ScenarioOutline:3>Examples_Definition:1>Examples:1>Examples_Description:0>Description_Helper:2>#Comment:0
        int MatchTokenAt_25(Token token, ParserContext context)
        {
            if (this.Match_Comment(context, token))
            {
                this.Build(context, token);
                return 25;
            }
            if (this.Match_TableRow(context, token))
            {
                this.Build(context, token);
                return 26;
            }
            if (this.Match_Empty(context, token))
            {
                this.Build(context, token);
                return 25;
            }
            
            const string stateComment = "State: 25 - Feature:2>Scenario_Definition:1>__alt0:1>ScenarioOutline:3>Examples_Definition:1>Examples:1>Examples_Description:0>Description_Helper:2>#Comment:0";
            token.Detach();
            var expectedTokens = new string[] {"#Comment", "#TableRow", "#Empty"};
            var error = token.IsEOF ? (ParserException)new UnexpectedEOFException(token, expectedTokens, stateComment) 
                : new UnexpectedTokenException(token, expectedTokens, stateComment);
            if (this.StopAtFirstError)
                throw error;
            
            this.AddError(context, error);
            return 25;

        }
        
        
        // Feature:2>Scenario_Definition:1>__alt0:1>ScenarioOutline:3>Examples_Definition:1>Examples:2>#TableRow:0
        int MatchTokenAt_26(Token token, ParserContext context)
        {
            if (this.Match_TableRow(context, token))
            {
                this.Build(context, token);
                return 27;
            }
            if (this.Match_Comment(context, token))
            {
                this.Build(context, token);
                return 26;
            }
            if (this.Match_Empty(context, token))
            {
                this.Build(context, token);
                return 26;
            }
            
            const string stateComment = "State: 26 - Feature:2>Scenario_Definition:1>__alt0:1>ScenarioOutline:3>Examples_Definition:1>Examples:2>#TableRow:0";
            token.Detach();
            var expectedTokens = new string[] {"#TableRow", "#Comment", "#Empty"};
            var error = token.IsEOF ? (ParserException)new UnexpectedEOFException(token, expectedTokens, stateComment) 
                : new UnexpectedTokenException(token, expectedTokens, stateComment);
            if (this.StopAtFirstError)
                throw error;
            
            this.AddError(context, error);
            return 26;

        }
        
        
        // Feature:2>Scenario_Definition:1>__alt0:1>ScenarioOutline:3>Examples_Definition:1>Examples:3>#TableRow:0
        int MatchTokenAt_27(Token token, ParserContext context)
        {
            if (this.Match_EOF(context, token))
            {
                this.EndRule(context, RuleType.Examples);
                this.EndRule(context, RuleType.Examples_Definition);
                this.EndRule(context, RuleType.ScenarioOutline);
                this.EndRule(context, RuleType.Scenario_Definition);
                this.Build(context, token);
                return 28;
            }
            if (this.Match_TableRow(context, token))
            {
                this.Build(context, token);
                return 27;
            }
            if (this.Match_TagLine(context, token))
            {
                if (this.LookAhead_0(context, token))
                {
                this.EndRule(context, RuleType.Examples);
                this.EndRule(context, RuleType.Examples_Definition);
                this.StartRule(context, RuleType.Examples_Definition);
                this.StartRule(context, RuleType.Tags);
                this.Build(context, token);
                return 22;
                }
            }
            if (this.Match_TagLine(context, token))
            {
                this.EndRule(context, RuleType.Examples);
                this.EndRule(context, RuleType.Examples_Definition);
                this.EndRule(context, RuleType.ScenarioOutline);
                this.EndRule(context, RuleType.Scenario_Definition);
                this.StartRule(context, RuleType.Scenario_Definition);
                this.StartRule(context, RuleType.Tags);
                this.Build(context, token);
                return 11;
            }
            if (this.Match_ExamplesLine(context, token))
            {
                this.EndRule(context, RuleType.Examples);
                this.EndRule(context, RuleType.Examples_Definition);
                this.StartRule(context, RuleType.Examples_Definition);
                this.StartRule(context, RuleType.Examples);
                this.Build(context, token);
                return 23;
            }
            if (this.Match_ScenarioLine(context, token))
            {
                this.EndRule(context, RuleType.Examples);
                this.EndRule(context, RuleType.Examples_Definition);
                this.EndRule(context, RuleType.ScenarioOutline);
                this.EndRule(context, RuleType.Scenario_Definition);
                this.StartRule(context, RuleType.Scenario_Definition);
                this.StartRule(context, RuleType.Scenario);
                this.Build(context, token);
                return 12;
            }
            if (this.Match_ScenarioOutlineLine(context, token))
            {
                this.EndRule(context, RuleType.Examples);
                this.EndRule(context, RuleType.Examples_Definition);
                this.EndRule(context, RuleType.ScenarioOutline);
                this.EndRule(context, RuleType.Scenario_Definition);
                this.StartRule(context, RuleType.Scenario_Definition);
                this.StartRule(context, RuleType.ScenarioOutline);
                this.Build(context, token);
                return 17;
            }
            if (this.Match_Comment(context, token))
            {
                this.Build(context, token);
                return 27;
            }
            if (this.Match_Empty(context, token))
            {
                this.Build(context, token);
                return 27;
            }
            
            const string stateComment = "State: 27 - Feature:2>Scenario_Definition:1>__alt0:1>ScenarioOutline:3>Examples_Definition:1>Examples:3>#TableRow:0";
            token.Detach();
            var expectedTokens = new string[] {"#EOF", "#TableRow", "#TagLine", "#ExamplesLine", "#ScenarioLine", "#ScenarioOutlineLine", "#Comment", "#Empty"};
            var error = token.IsEOF ? (ParserException)new UnexpectedEOFException(token, expectedTokens, stateComment) 
                : new UnexpectedTokenException(token, expectedTokens, stateComment);
            if (this.StopAtFirstError)
                throw error;
            
            this.AddError(context, error);
            return 27;

        }
        
        
        // Feature:2>Scenario_Definition:1>__alt0:1>ScenarioOutline:2>ScenarioOutline_Step:0>Step:1>Step_Arg:0>__alt1:1>DocString:0>#DocStringSeparator:0
        int MatchTokenAt_29(Token token, ParserContext context)
        {
            if (this.Match_DocStringSeparator(context, token))
            {
                this.Build(context, token);
                return 30;
            }
            if (this.Match_Other(context, token))
            {
                this.Build(context, token);
                return 29;
            }
            
            const string stateComment = "State: 29 - Feature:2>Scenario_Definition:1>__alt0:1>ScenarioOutline:2>ScenarioOutline_Step:0>Step:1>Step_Arg:0>__alt1:1>DocString:0>#DocStringSeparator:0";
            token.Detach();
            var expectedTokens = new string[] {"#DocStringSeparator", "#Other"};
            var error = token.IsEOF ? (ParserException)new UnexpectedEOFException(token, expectedTokens, stateComment) 
                : new UnexpectedTokenException(token, expectedTokens, stateComment);
            if (this.StopAtFirstError)
                throw error;
            
            this.AddError(context, error);
            return 29;

        }
        
        
        // Feature:2>Scenario_Definition:1>__alt0:1>ScenarioOutline:2>ScenarioOutline_Step:0>Step:1>Step_Arg:0>__alt1:1>DocString:2>#DocStringSeparator:0
        int MatchTokenAt_30(Token token, ParserContext context)
        {
            if (this.Match_StepLine(context, token))
            {
                this.EndRule(context, RuleType.DocString);
                this.EndRule(context, RuleType.Step);
                this.StartRule(context, RuleType.Step);
                this.Build(context, token);
                return 20;
            }
            if (this.Match_TagLine(context, token))
            {
                this.EndRule(context, RuleType.DocString);
                this.EndRule(context, RuleType.Step);
                this.StartRule(context, RuleType.Examples_Definition);
                this.StartRule(context, RuleType.Tags);
                this.Build(context, token);
                return 22;
            }
            if (this.Match_ExamplesLine(context, token))
            {
                this.EndRule(context, RuleType.DocString);
                this.EndRule(context, RuleType.Step);
                this.StartRule(context, RuleType.Examples_Definition);
                this.StartRule(context, RuleType.Examples);
                this.Build(context, token);
                return 23;
            }
            if (this.Match_Comment(context, token))
            {
                this.Build(context, token);
                return 30;
            }
            if (this.Match_Empty(context, token))
            {
                this.Build(context, token);
                return 30;
            }
            
            const string stateComment = "State: 30 - Feature:2>Scenario_Definition:1>__alt0:1>ScenarioOutline:2>ScenarioOutline_Step:0>Step:1>Step_Arg:0>__alt1:1>DocString:2>#DocStringSeparator:0";
            token.Detach();
            var expectedTokens = new string[] {"#StepLine", "#TagLine", "#ExamplesLine", "#Comment", "#Empty"};
            var error = token.IsEOF ? (ParserException)new UnexpectedEOFException(token, expectedTokens, stateComment) 
                : new UnexpectedTokenException(token, expectedTokens, stateComment);
            if (this.StopAtFirstError)
                throw error;
            
            this.AddError(context, error);
            return 30;

        }
        
        
        // Feature:2>Scenario_Definition:1>__alt0:0>Scenario:2>Scenario_Step:0>Step:1>Step_Arg:0>__alt1:1>DocString:0>#DocStringSeparator:0
        int MatchTokenAt_31(Token token, ParserContext context)
        {
            if (this.Match_DocStringSeparator(context, token))
            {
                this.Build(context, token);
                return 32;
            }
            if (this.Match_Other(context, token))
            {
                this.Build(context, token);
                return 31;
            }
            
            const string stateComment = "State: 31 - Feature:2>Scenario_Definition:1>__alt0:0>Scenario:2>Scenario_Step:0>Step:1>Step_Arg:0>__alt1:1>DocString:0>#DocStringSeparator:0";
            token.Detach();
            var expectedTokens = new string[] {"#DocStringSeparator", "#Other"};
            var error = token.IsEOF ? (ParserException)new UnexpectedEOFException(token, expectedTokens, stateComment) 
                : new UnexpectedTokenException(token, expectedTokens, stateComment);
            if (this.StopAtFirstError)
                throw error;
            
            this.AddError(context, error);
            return 31;

        }
        
        
        // Feature:2>Scenario_Definition:1>__alt0:0>Scenario:2>Scenario_Step:0>Step:1>Step_Arg:0>__alt1:1>DocString:2>#DocStringSeparator:0
        int MatchTokenAt_32(Token token, ParserContext context)
        {
            if (this.Match_EOF(context, token))
            {
                this.EndRule(context, RuleType.DocString);
                this.EndRule(context, RuleType.Step);
                this.EndRule(context, RuleType.Scenario);
                this.EndRule(context, RuleType.Scenario_Definition);
                this.Build(context, token);
                return 28;
            }
            if (this.Match_StepLine(context, token))
            {
                this.EndRule(context, RuleType.DocString);
                this.EndRule(context, RuleType.Step);
                this.StartRule(context, RuleType.Step);
                this.Build(context, token);
                return 15;
            }
            if (this.Match_TagLine(context, token))
            {
                this.EndRule(context, RuleType.DocString);
                this.EndRule(context, RuleType.Step);
                this.EndRule(context, RuleType.Scenario);
                this.EndRule(context, RuleType.Scenario_Definition);
                this.StartRule(context, RuleType.Scenario_Definition);
                this.StartRule(context, RuleType.Tags);
                this.Build(context, token);
                return 11;
            }
            if (this.Match_ScenarioLine(context, token))
            {
                this.EndRule(context, RuleType.DocString);
                this.EndRule(context, RuleType.Step);
                this.EndRule(context, RuleType.Scenario);
                this.EndRule(context, RuleType.Scenario_Definition);
                this.StartRule(context, RuleType.Scenario_Definition);
                this.StartRule(context, RuleType.Scenario);
                this.Build(context, token);
                return 12;
            }
            if (this.Match_ScenarioOutlineLine(context, token))
            {
                this.EndRule(context, RuleType.DocString);
                this.EndRule(context, RuleType.Step);
                this.EndRule(context, RuleType.Scenario);
                this.EndRule(context, RuleType.Scenario_Definition);
                this.StartRule(context, RuleType.Scenario_Definition);
                this.StartRule(context, RuleType.ScenarioOutline);
                this.Build(context, token);
                return 17;
            }
            if (this.Match_Comment(context, token))
            {
                this.Build(context, token);
                return 32;
            }
            if (this.Match_Empty(context, token))
            {
                this.Build(context, token);
                return 32;
            }
            
            const string stateComment = "State: 32 - Feature:2>Scenario_Definition:1>__alt0:0>Scenario:2>Scenario_Step:0>Step:1>Step_Arg:0>__alt1:1>DocString:2>#DocStringSeparator:0";
            token.Detach();
            var expectedTokens = new string[] {"#EOF", "#StepLine", "#TagLine", "#ScenarioLine", "#ScenarioOutlineLine", "#Comment", "#Empty"};
            var error = token.IsEOF ? (ParserException)new UnexpectedEOFException(token, expectedTokens, stateComment) 
                : new UnexpectedTokenException(token, expectedTokens, stateComment);
            if (this.StopAtFirstError)
                throw error;
            
            this.AddError(context, error);
            return 32;

        }
        
        
        // Feature:1>Background:2>Scenario_Step:0>Step:1>Step_Arg:0>__alt1:1>DocString:0>#DocStringSeparator:0
        int MatchTokenAt_33(Token token, ParserContext context)
        {
            if (this.Match_DocStringSeparator(context, token))
            {
                this.Build(context, token);
                return 34;
            }
            if (this.Match_Other(context, token))
            {
                this.Build(context, token);
                return 33;
            }
            
            const string stateComment = "State: 33 - Feature:1>Background:2>Scenario_Step:0>Step:1>Step_Arg:0>__alt1:1>DocString:0>#DocStringSeparator:0";
            token.Detach();
            var expectedTokens = new string[] {"#DocStringSeparator", "#Other"};
            var error = token.IsEOF ? (ParserException)new UnexpectedEOFException(token, expectedTokens, stateComment) 
                : new UnexpectedTokenException(token, expectedTokens, stateComment);
            if (this.StopAtFirstError)
                throw error;
            
            this.AddError(context, error);
            return 33;

        }
        
        
        // Feature:1>Background:2>Scenario_Step:0>Step:1>Step_Arg:0>__alt1:1>DocString:2>#DocStringSeparator:0
        int MatchTokenAt_34(Token token, ParserContext context)
        {
            if (this.Match_EOF(context, token))
            {
                this.EndRule(context, RuleType.DocString);
                this.EndRule(context, RuleType.Step);
                this.EndRule(context, RuleType.Background);
                this.Build(context, token);
                return 28;
            }
            if (this.Match_StepLine(context, token))
            {
                this.EndRule(context, RuleType.DocString);
                this.EndRule(context, RuleType.Step);
                this.StartRule(context, RuleType.Step);
                this.Build(context, token);
                return 9;
            }
            if (this.Match_TagLine(context, token))
            {
                this.EndRule(context, RuleType.DocString);
                this.EndRule(context, RuleType.Step);
                this.EndRule(context, RuleType.Background);
                this.StartRule(context, RuleType.Scenario_Definition);
                this.StartRule(context, RuleType.Tags);
                this.Build(context, token);
                return 11;
            }
            if (this.Match_ScenarioLine(context, token))
            {
                this.EndRule(context, RuleType.DocString);
                this.EndRule(context, RuleType.Step);
                this.EndRule(context, RuleType.Background);
                this.StartRule(context, RuleType.Scenario_Definition);
                this.StartRule(context, RuleType.Scenario);
                this.Build(context, token);
                return 12;
            }
            if (this.Match_ScenarioOutlineLine(context, token))
            {
                this.EndRule(context, RuleType.DocString);
                this.EndRule(context, RuleType.Step);
                this.EndRule(context, RuleType.Background);
                this.StartRule(context, RuleType.Scenario_Definition);
                this.StartRule(context, RuleType.ScenarioOutline);
                this.Build(context, token);
                return 17;
            }
            if (this.Match_Comment(context, token))
            {
                this.Build(context, token);
                return 34;
            }
            if (this.Match_Empty(context, token))
            {
                this.Build(context, token);
                return 34;
            }
            
            const string stateComment = "State: 34 - Feature:1>Background:2>Scenario_Step:0>Step:1>Step_Arg:0>__alt1:1>DocString:2>#DocStringSeparator:0";
            token.Detach();
            var expectedTokens = new string[] {"#EOF", "#StepLine", "#TagLine", "#ScenarioLine", "#ScenarioOutlineLine", "#Comment", "#Empty"};
            var error = token.IsEOF ? (ParserException)new UnexpectedEOFException(token, expectedTokens, stateComment) 
                : new UnexpectedTokenException(token, expectedTokens, stateComment);
            if (this.StopAtFirstError)
                throw error;
            
            this.AddError(context, error);
            return 34;

        }
        

        
        bool LookAhead_0(ParserContext context, Token currentToken)
        {
            currentToken.Detach();
            Token token;
            var queue = new Queue<Token>();
            bool match = false;
            do
            {
                token = this.ReadToken(context);
                token.Detach();
                queue.Enqueue(token);

                if (false
                    || this.Match_ExamplesLine(context, token)
                )
                {
                    match = true;
                    break;
                }
            } while (false
                || this.Match_Empty(context, token)
                || this.Match_Comment(context, token)
                || this.Match_TagLine(context, token)
            );
            foreach(var t in queue)
                context.TokenQueue.Enqueue(t);
            return match;
        }
        
    }

    public partial interface IAstBuilder<T> 
    {
        void Build(Token token);
        void StartRule(RuleType ruleType);
        void EndRule(RuleType ruleType);
        T GetResult();
    }

    public partial interface ITokenScanner 
    {
        Token Read();
    }

    public partial interface ITokenMatcher
    {
        bool Match_EOF(Token token);
        bool Match_Empty(Token token);
        bool Match_Comment(Token token);
        bool Match_TagLine(Token token);
        bool Match_FeatureLine(Token token);
        bool Match_BackgroundLine(Token token);
        bool Match_ScenarioLine(Token token);
        bool Match_ScenarioOutlineLine(Token token);
        bool Match_ExamplesLine(Token token);
        bool Match_StepLine(Token token);
        bool Match_DocStringSeparator(Token token);
        bool Match_TableRow(Token token);
        bool Match_Language(Token token);
        bool Match_Other(Token token);
    }
}
#pragma warning restore
#endregion
