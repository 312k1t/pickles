// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.34209
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace PicklesDoc.Pickles.Test.DocumentationBuilders.JSON
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Formatting A Feature")]
    public partial class FormattingAFeatureFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "FormattingAFeature.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Formatting A Feature", "", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A simple feature")]
        [NUnit.Framework.CategoryAttribute("json")]
        public virtual void ASimpleFeature()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A simple feature", new string[] {
                        "json"});
#line 4
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 6
    testRunner.Given("I have this feature description", @"Feature: Clearing Screen
    In order to restart a new set of calculations
    As a math idiot
    I want to be able to clear the screen

@workflow @slow
Scenario: Clear the screen
    Given I have entered 50 into the calculator
    And I have entered 70 into the calculator
    When I press C
    Then the screen should be empty", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 20
 testRunner.When("I generate the documentation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 21
    testRunner.Then("the JSON file should contain", "{\r\n  \"Features\": [\r\n    {\r\n      \"RelativeFolder\": \"\",\r\n      \"Feature\": {\r\n     " +
                    "   \"Name\": \"Clearing Screen\",\r\n        \"Description\": \"    In order to restart a" +
                    " new set of calculations\\r\\n    As a math idiot\\r\\n    I want to be able to clea" +
                    "r the screen\",\r\n        \"FeatureElements\": [\r\n          {\r\n            \"Name\": \"" +
                    "Clear the screen\",\r\n            \"Description\": \"\",\r\n            \"Steps\": [\r\n    " +
                    "          {\r\n                \"Keyword\": \"Given\",\r\n                \"NativeKeyword" +
                    "\": \"Given \",\r\n                \"Name\": \"I have entered 50 into the calculator\"\r\n " +
                    "             },\r\n              {\r\n                \"Keyword\": \"And\",\r\n           " +
                    "     \"NativeKeyword\": \"And \",\r\n                \"Name\": \"I have entered 70 into t" +
                    "he calculator\"\r\n              },\r\n              {\r\n                \"Keyword\": \"W" +
                    "hen\",\r\n                \"NativeKeyword\": \"When \",\r\n                \"Name\": \"I pre" +
                    "ss C\"\r\n              },\r\n              {\r\n                \"Keyword\": \"Then\",\r\n  " +
                    "              \"NativeKeyword\": \"Then \",\r\n                \"Name\": \"the screen sho" +
                    "uld be empty\"\r\n              }\r\n            ],\r\n            \"Tags\": [\r\n         " +
                    "     \"@workflow\",\r\n              \"@slow\"\r\n            ],\r\n            \"Result\": " +
                    "{\r\n              \"WasExecuted\": false,\r\n              \"WasSuccessful\": false\r\n  " +
                    "          }\r\n          }\r\n        ],\r\n        \"Result\": {\r\n          \"WasExecute" +
                    "d\": false,\r\n          \"WasSuccessful\": false\r\n        },\r\n        \"Tags\": []\r\n  " +
                    "    },\r\n      \"Result\": {\r\n        \"WasExecuted\": false,\r\n        \"WasSuccessful" +
                    "\": false\r\n      }\r\n    }\r\n  ],\r\n  \"Configuration\": {", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
